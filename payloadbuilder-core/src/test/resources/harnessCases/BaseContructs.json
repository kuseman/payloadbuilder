{
  "name": "BaseContructs",
  "catalogs": [
    {
      "alias": "c",
      "tables": [
        {
          "name": "source",
          "columns": [ "col1", "col2" ],
          "rows": [
            [1, 2],
            [3, 4],
            [5, 6]
          ]
        },
        {
          "name": "data",
          "columns": [ "id", "row_id", "data" ],
          "rows": [
            [1, 1, "1_1"],
            [1, 2, "1_2"],
            [2, 1, "2_1"],
            [3, 1, "3_1"],
            [3, 2, "3_2"],
            [3, 3, "3_3"]
          ]
        },
        {
          "name": "strings",
          "columns": [ "id", "string1", "string2" ],
          "rows": [
            [1, "some string 1", "123abc"],
            [2,  "hello world", "asd"],
            [3, "string 3", "2_1"],
            [4, "same little text", "$56"]
          ]
        },
        {
          "name": "agg_data",
          "columns": ["id", "value"],
          "rows": [
            [1, 20],
            [1, 10],
            [2, 30],
            [2, null],
            [3, 50],
            [3, 60]
          ]
        }
      ]
    }
  ],
  "cases": [
    {
      "name": "Agg. functions",
      "query": [
        "select id, count(1) count_const, count(value) count_col ",
        ",          max(2)   max_const,   max(value)   max_col ",
        ",          min(3)   min_const,   min(value)   min_col ",
        ",          sum(4)   sum_const,   sum(value)   sum_col",
        "from agg_data ",
        "group by id"
      ],
      "expectedResultSets": [
        [
          [{ "key": "id", "value": 1 },{ "key": "count_const", "value": 2 },{ "key": "count_col", "value": 2 },{ "key": "max_const", "value": 2 },{ "key": "max_col", "value": 20 },{ "key": "min_const", "value": 3 },{ "key": "min_col", "value": 10 },{ "key": "sum_const", "value": 8 },{ "key": "sum_col", "value": 30 }],
          [{ "key": "id", "value": 2 },{ "key": "count_const", "value": 2 },{ "key": "count_col", "value": 1 },{ "key": "max_const", "value": 2 },{ "key": "max_col", "value": 30 },{ "key": "min_const", "value": 3 },{ "key": "min_col", "value": 30 },{ "key": "sum_const", "value": 8 },{ "key": "sum_col", "value": 30 }],
          [{ "key": "id", "value": 3 },{ "key": "count_const", "value": 2 },{ "key": "count_col", "value": 2 },{ "key": "max_const", "value": 2 },{ "key": "max_col", "value": 60 },{ "key": "min_const", "value": 3 },{ "key": "min_col", "value": 50 },{ "key": "sum_const", "value": 8 },{ "key": "sum_col", "value": 110 }]
        ]
      ]
    },
  	{
      "name": "if statement",
      "query": [
        "if (true) then ",
        "  select top 1 id from data ",
        "else ",
        " select top 1 col1 from source ",
        "end if "
      ],
      "expectedResultSets": [
        [
          [{ "key": "id", "value": 1 }]
        ]
      ]
    },
    {
      "name": "if statement (reverse)",
      "query": [
        "if (false) then ",
        "  select top 1 id from data ",
        "else ",
        " select top 1 col1 from source ",
        "end if "
      ],
      "expectedResultSets": [
        [
          [{ "key": "col1", "value": 1 }]
        ]
      ]
    },
    {
      "name": "Test variables are case in-sensetive",
      "query": [
        "set @varA = 'test' ",
        "set @VARB = 'test1' ",
        "set @vArc = 'test2' ",
        "select @vara col1,@VARb col2,@vaRc col3 "
      ],
      "expectedResultSets": [
        [
          [{ "key": "col1", "value": "test" }, { "key": "col2", "value": "test1" }, { "key": "col3", "value": "test2" }]
        ]
      ]
    },
    {
      "name": "Apply with subquery without table",
      "query": [
        "select * ",
        "from source s ",
        "outer apply ( ",
        "  select 1 col3 ",
        ") x "
      ],
      "expectedResultSets": [
        [
          [{ "key": "col1", "value": 1 }, { "key": "col2", "value": 2 }, { "key": "col3", "value": 1 }],
          [{ "key": "col1", "value": 3 }, { "key": "col2", "value": 4 }, { "key": "col3", "value": 1 }],
          [{ "key": "col1", "value": 5 }, { "key": "col2", "value": 6 }, { "key": "col3", "value": 1 }]
        ]
      ]
    },
    {
      "name": "Apply with subquery with outer reference",
      "query": [
        "select * ",
        "from source s ",
        "outer apply ( ",
        "  select s.col1 col3 ",
        ") x "
      ],
      "expectedResultSets": [
        [
          [{ "key": "col1", "value": 1 }, { "key": "col2", "value": 2 }, { "key": "col3", "value": 1 }],
          [{ "key": "col1", "value": 3 }, { "key": "col2", "value": 4 }, { "key": "col3", "value": 3 }],
          [{ "key": "col1", "value": 5 }, { "key": "col2", "value": 6 }, { "key": "col3", "value": 5 }]
        ]
      ]
    },
    {
      "name": "Apply with subquery with outer computed reference",
      "query": [
        "select * ",
        "from source s ",
        "outer apply ( ",
        "  select s.col1 + s.col2 col3 ",
        ") x "
      ],
      "expectedResultSets": [
        [
          [{ "key": "col1", "value": 1 }, { "key": "col2", "value": 2 }, { "key": "col3", "value": 3 }],
          [{ "key": "col1", "value": 3 }, { "key": "col2", "value": 4 }, { "key": "col3", "value": 7 }],
          [{ "key": "col1", "value": 5 }, { "key": "col2", "value": 6 }, { "key": "col3", "value": 11 }]
        ]
      ]
    },
    {
      "name": "Asterisk select",
      "query": [
        "select * from source"
      ],
      "expectedResultSets": [
        [
          [{ "key": "col1", "value": 1 }, { "key": "col2", "value": 2 }],
          [{ "key": "col1", "value": 3 }, { "key": "col2", "value": 4 }],
          [{ "key": "col1", "value": 5 }, { "key": "col2", "value": 6 }]
        ]
      ]
    },
    {
      "name": "Subquery with a single table source",
      "query": [
        "select x.col1, x.col2 from (select * from source) x"
      ],
      "expectedResultSets": [
        [
          [{ "key": "col1", "value": 1 }, { "key": "col2", "value": 2 }],
          [{ "key": "col1", "value": 3 }, { "key": "col2", "value": 4 }],
          [{ "key": "col1", "value": 5 }, { "key": "col2", "value": 6 }]
        ]
      ]
    },
    {
      "name": "Lambda functions",
      "query": [
        "select r.Value, ",
        " r1.map(x -> r.Value + x.Value) map, ",
        " r1.filter(x -> (r.Value - x.Value) > 0).map(x -> x.Value) filter, ",
        " r1.flatMap(x -> listOf(r.Value, x.Value)) flatMap, ",
        " r1.any(x -> x.Value > 0) any,",
        " r1.all(x -> r.Value - x.Value > 0) all, ",
        " r1.none(x -> r.Value + x.Value > 10) none",
        
        "from range(1, 4) r ",
        "inner join range(1, 11) r1 with (populate=true) ",
        "  on r1.Value % 3 + 1 = r.Value"
      ],
      "expectedResultSets": [
        [
          [{ "key": "Value", "value": 1 },{ "key": "map", "value": [4,7,10] },	{ "key": "filter", "value": [] }, { "key": "flatMap", "value": [1, 3, 1, 6, 1, 9] },	   {"key":"any","value":true},{"key":"all","value":false},{"key":"none","value":true}],
          [{ "key": "Value", "value": 2 },{ "key": "map", "value": [3,6,9,12] },{ "key": "filter", "value": [1] },{ "key": "flatMap", "value": [2, 1, 2, 4, 2, 7, 2, 10] },{"key":"any","value":true},{"key":"all","value":false},{"key":"none","value":false}],
          [{ "key": "Value", "value": 3 },{ "key": "map", "value": [5,8,11] },	{ "key": "filter", "value": [2] },{ "key": "flatMap", "value": [3, 2, 3, 5, 3, 8] },	   {"key":"any","value":true},{"key":"all","value":false},{"key":"none","value":false}]
        ]
      ]
    },
    {
      "name": "Order by",
      "query": [
        "select col1 from source order by col2 desc"
      ],
      "expectedResultSets": [
        [
          [{ "key": "col1", "value": 5 }],
          [{ "key": "col1", "value": 3 }],
          [{ "key": "col1", "value": 1 }]
        ]
      ]
    },
    {
      "name": "Order by expression",
      "query": [
        "select id - row_id newCol from data order by newcol desc"
      ],
      "expectedResultSets": [
        [
          [{ "key": "newCol", "value": 2 }],
          [{ "key": "newCol", "value": 1 }],
          [{ "key": "newCol", "value": 1 }],
          [{ "key": "newCol", "value": 0 }],
          [{ "key": "newCol", "value": 0 }],
          [{ "key": "newCol", "value": -1 }]
        ]
      ]
    },
    {
      "name": "Order by expression function",
      "query": [
        "select hash(id, row_id) newCol from data order by newcol desc"
      ],
      "expectedResultSets": [
        [
          [{ "key": "newCol", "value": 1057 }],
          [{ "key": "newCol", "value": 1056 }],
          [{ "key": "newCol", "value": 1055 }],
          [{ "key": "newCol", "value": 1024 }],
          [{ "key": "newCol", "value": 994 }],
          [{ "key": "newCol", "value": 993 }]
        ]
      ]
    },
    {
      "name": "Order by ordinal",
      "query": [
        "select id - row_id newCol from data order by 1 desc"
      ],
      "expectedResultSets": [
        [
          [{ "key": "newCol", "value": 2 }],
          [{ "key": "newCol", "value": 1 }],
          [{ "key": "newCol", "value": 1 }],
          [{ "key": "newCol", "value": 0 }],
          [{ "key": "newCol", "value": 0 }],
          [{ "key": "newCol", "value": -1 }]
        ]
      ]
    },
    {
      "name": "Order by ordinal non computed",
      "query": [
        "select id newCol from data order by 1 desc"
      ],
      "expectedResultSets": [
        [
          [{ "key": "newCol", "value": 3 }],
          [{ "key": "newCol", "value": 3 }],
          [{ "key": "newCol", "value": 3 }],
          [{ "key": "newCol", "value": 2 }],
          [{ "key": "newCol", "value": 1 }],
          [{ "key": "newCol", "value": 1 }]
        ]
      ]
    },
    {
      "name": "Order by column non computed",
      "query": [
        "select id newCol from data order by newCol desc"
      ],
      "expectedResultSets": [
        [
          [{ "key": "newCol", "value": 3 }],
          [{ "key": "newCol", "value": 3 }],
          [{ "key": "newCol", "value": 3 }],
          [{ "key": "newCol", "value": 2 }],
          [{ "key": "newCol", "value": 1 }],
          [{ "key": "newCol", "value": 1 }]
        ]
      ]
    },
    {
      "name": "Order by ordinal, out of range",
      "query": [
        "select id - row_id newCol from data order by 10 desc"
      ],
      "expectedException": "se.kuseman.payloadbuilder.core.parser.ParseException",
      "expectedMessageContains": "ORDER BY position is out of range"
    },
    {
      "name": "Order by ordinal, asterisk",
      "query": [
        "select * from data order by 1 desc"
      ],
      "expectedException": "se.kuseman.payloadbuilder.core.parser.ParseException",
      "expectedMessageContains": "ORDER BY position is not supported for non expression select items"
    },
    {
      "name": "Order by ordinal, asterisk 2",
      "comment": "Order by ordinal cannot be done if an asterisk select item is placed befor or on the ordinal",
      "query": [
        "select *, col from data order by 2 desc"
      ],
      "expectedException": "se.kuseman.payloadbuilder.core.parser.ParseException",
      "expectedMessageContains": "ORDER BY position is not supported for non expression select items"
    },
    {
      "name": "Where",
      "query": [
        "select col1 from source where col2 >=4 order by col2 desc"
      ],
      "expectedResultSets": [
        [
          [{ "key": "col1", "value": 5 }],
          [{ "key": "col1", "value": 3 }]
        ]
      ]
    },
    {
      "name": "Top",
      "query": [
        "select top 1 * from source "
      ],
      "expectedResultSets": [
        [
          [{ "key": "col1", "value": 1 }, { "key": "col2", "value": 2 }]
        ]
      ]
    },
    {
      "name": "Top with order by",
      "query": [
        "select top 1 * from source order by col2 desc"
      ],
      "expectedResultSets": [
        [
          [{ "key": "col1", "value": 5 }, { "key": "col2", "value": 6 }]
        ]
      ]
    },
    {
      "name": "Group by",
      "query": [
        "select * from source group by col1"
      ],
      "expectedResultSets": [
        [
          [{ "key": "col1", "value": 1 }, { "key": "col2", "value": [2] }],
          [{ "key": "col1", "value": 3 }, { "key": "col2", "value": [4] }],
          [{ "key": "col1", "value": 5 }, { "key": "col2", "value": [6] }]
        ]
      ]
    },
    {
      "name": "Group by with aggs",
      "query": [
        "select id, count(row_id) count, count(1) count1, count(case when id = 1 then null else 1 end) countExpr, sum(row_id) sum, data ",
        "from data ",
        "group by id"
      ],
      "expectedResultSets": [
        [
          [{ "key": "id", "value": 1 }, { "key": "count", "value": 2 }, { "key": "count1", "value": 2 }, { "key": "countExpr", "value": 0 }, { "key": "sum", "value": 3 }, { "key": "data", "value": ["1_1","1_2"] }],
          [{ "key": "id", "value": 2 }, { "key": "count", "value": 1 }, { "key": "count1", "value": 1 }, { "key": "countExpr", "value": 1 }, { "key": "sum", "value": 1 }, { "key": "data", "value": ["2_1"] }],
          [{ "key": "id", "value": 3 }, { "key": "count", "value": 3 }, { "key": "count1", "value": 3 }, { "key": "countExpr", "value": 3 }, { "key": "sum", "value": 6 }, { "key": "data", "value": ["3_1","3_2","3_3"] }]
        ]
      ]
    },
    {
      "name": "Double result sets",
      "query": [
        "select * from source ",
        "select * from source where col2 = 2"
      ],
      "expectedResultSets": [
        [
          [{ "key": "col1", "value": 1 }, { "key": "col2", "value": 2 }],
          [{ "key": "col1", "value": 3 }, { "key": "col2", "value": 4 }],
          [{ "key": "col1", "value": 5 }, { "key": "col2", "value": 6 }]
        ],
        [
          [{ "key": "col1", "value": 1 }, { "key": "col2", "value": 2 }]
        ]
      ]
    },
    {
      "name": "Assignment select",
      "query": [
        "set @var3 = 0 ",
        "select @var1 = 10 + 20 ",
        "select @var2 = col1 + col2, @var3 = @var3 + 1 from source ",
        "select @var1 Var1, @var2 Var2, @var3 Var3"
      ],
      "expectedResultSets": [
        [
          [{ "key": "Var1", "value": 30 }, { "key": "Var2", "value": 11 }, { "key": "Var3", "value": 3 }]
        ]
      ]
    },
    {
      "name": "LIKE",
      "query": [
        "select * from strings where string1 like '%ll%'",
        "select id from strings where string1 like 's_me%'"
      ],
      "expectedResultSets": [
        [
          [{ "key": "id", "value": 2 }, { "key": "string1", "value": "hello world" }, { "key": "string2", "value": "asd" }]
        ],
        [
          [{ "key": "id", "value": 1 }],
          [{ "key": "id", "value": 4 }]
        ]
        
      ]
    },
    {
      "name": "Assignment select",
      "query": [
        "set @var3 = 0 ",
        "select @var1 = 10 + 20 ",
        "select @var2 = col1 + col2, @var3 = @var3 + 1 from source ",
        "select @var1 Var1, @var2 Var2, @var3 Var3"
      ],
      "expectedResultSets": [
        [
          [{ "key": "Var1", "value": 30 }, { "key": "Var2", "value": 11 }, { "key": "Var3", "value": 3 }]
        ]
      ]
    },
    {
      "name": "Calculated value",
      "query": [
        "select id + row_id calc ",
        "from data "
      ],
      "expectedResultSets": [
        [
          [{ "key": "calc", "value": 2 }],
          [{ "key": "calc", "value": 3 }],
          [{ "key": "calc", "value": 3 }],
          [{ "key": "calc", "value": 4 }],
          [{ "key": "calc", "value": 5 }],
          [{ "key": "calc", "value": 6 }]
        ]
      ]
    },
    {
      "name": "Calculated value in sub query",
      "query": [
        "select calc ",
        "from ",
        "( ",
        "  select `value: ${id + row_id}` calc ",
        "  from data ",
        ") x"
      ],
      "expectedResultSets": [
        [
          [{ "key": "calc", "value": "value: 2" }],
          [{ "key": "calc", "value": "value: 3" }],
          [{ "key": "calc", "value": "value: 3" }],
          [{ "key": "calc", "value": "value: 4" }],
          [{ "key": "calc", "value": "value: 5" }],
          [{ "key": "calc", "value": "value: 6" }]
        ]
      ]
    },
    {
      "name": "Calculated value in sub query with join",
      "description": [
        "Here we select columns from the sub query table source and hence, ",
        "we should not get values from 'data' here for the single part columns.",
        "However for the multipart items we should still dig down to the correct sub alias"
      ],
      "query": [
        "select id, col2, calc, x.d.data ",
        "from ",
        "( ",
        "  select d.id, s.col2, d.id + s.col2 calc ",
        "  from data d ",
        "  inner join source s ",
        "    on s.col1 = d.row_id ",
        ") x"
      ],
      "expectedResultSets": [
        [
          [{ "key": "id", "value": 1 },{ "key": "col2", "value": 2 },{ "key": "calc", "value": 3 },{ "key": "data", "value": "1_1" }],
          [{ "key": "id", "value": 2 },{ "key": "col2", "value": 2 },{ "key": "calc", "value": 4 },{ "key": "data", "value": "2_1" }],
          [{ "key": "id", "value": 3 },{ "key": "col2", "value": 2 },{ "key": "calc", "value": 5 },{ "key": "data", "value": "3_1" }],
          [{ "key": "id", "value": 3 },{ "key": "col2", "value": 4 },{ "key": "calc", "value": 7 },{ "key": "data", "value": "3_3" }]          
        ]
      ]
    },
    {
      "name": "Join on a calculated column",
      "description": [
        "Make sure that the calculated column inside subquery in used in the join predicate"
      ],
      "query": [
        "select *",
        "from source s",
        "inner join ",
        "( ",
        "  select id + row_id id, d.data",
        "  from data d ",
        ") x ",
        "  on x.id = s.col1 "
      ],
      "expectedResultSets": [
        [
          [{ "key": "col1", "value": 3 },{ "key": "col2", "value": 4 },{ "key": "id", "value": 3 },{ "key": "data", "value": "1_2" }],
          [{ "key": "col1", "value": 3 },{ "key": "col2", "value": 4 },{ "key": "id", "value": 3 },{ "key": "data", "value": "2_1" }],
          [{ "key": "col1", "value": 5 },{ "key": "col2", "value": 6 },{ "key": "id", "value": 5 },{ "key": "data", "value": "3_2" }]
        ]
      ]
    },
    {
      "name": "Reference to non-existing fields in subquery",
      "query": [
        "select col ",
        "from ",
        "( ",
        "  select id ",
        "  from data d ",
        ") x"
      ],
      "expectedException": "se.kuseman.payloadbuilder.core.parser.ParseException",
      "expectedMessageContains": "Unknown column: 'col' in table source: 'SubQuery (x)', expected one of: [id]"
    },
    {
      "name": "Selects without table source",
      "query": [
      	"select 1",
        "select 2 where false",
        "select 3 order by 1",
        "select top 10 4"
      ],
      "expectedResultSets": [
      	[
      	  [{"key":"","value": 1}]
      	],
      	[
      	],
      	[
      	  [{"key":"","value": 3}]
      	],
      	[
      	  [{"key":"","value": 4}]
      	]
      ]
    },
    {
      "name": "Selects with for output",
      "query": [
      	"select (select 1 col1, 2 col2 for object), ",
      	"       (select 1, 2 for array), ",
     	"       (select 1 col1, 2 col2 for object_array), ",
     	"       (select (select 1, 2 for array), (select 3, 4 for array) for array),",
     	"       (select (select 1, 2 for array) ar1, (select 3, 4 for array) ar2 for object)"
      ],
      "expectedResultSets": [
      	[
      	  [{"key":"","value": {"col1": 1, "col2": 2}},{"key":"","value": [1,2]},{"key":"","value": [{"col1": 1, "col2": 2}]},{"key":"","value": [[1,2],[3,4]]},{"key":"","value": {"ar1":[1,2],"ar2":[3,4]}}]
      	]
      ]
    },
    {
      "name": "Selects with for output with table source",
      "query": [
      	"select (select d.data row_id, col1, col2 from source for object_array) obj ",
      	"from data d ",
      	"where id = 1"
      ],
      "expectedResultSets": [
      	[
      	  [{"key":"obj","value": [{"row_id": "1_1","col1": 1,"col2": 2},{"row_id":"1_1","col1": 3,"col2": 4},{"row_id":"1_1","col1": 5, "col2": 6}]}],
      	  [{"key":"obj","value": [{"row_id": "1_2","col1": 1,"col2": 2},{"row_id":"1_2","col1": 3,"col2": 4},{"row_id":"1_2","col1": 5, "col2": 6}]}]
      	]
      ]
    },
    {
      "name": "Selects with for output and subscript ",
      "description": [
        "Ensure that context tuples stay consistent even if they are change during a single projection evaluation.",
        "Here the dereference expressions (d[0].data, st[0].id) changes the context tuple and the projections after should not be affected"
      ],
      "query": [
      	"select d[0].data ",
      	", ( select st[0].id, row_id, data, s.col2 from open_rows(d) for object_array)  obj",
      	"from source s ",
      	"inner join data d with (populate = true) ",
      	"  on d.id = s.col1 ",
      	"inner join strings st with (populate = true) ",
      	"  on st.id = s.col1 "
      ],
      "expectedResultSets": [
      	[
      	  [{"key":"data","value": "1_1"}, {"key": "obj", "value": [ { "id": 1, "row_id": 1, "data": "1_1", "col2": 2 }, { "id": 1, "row_id": 2, "data": "1_2", "col2": 2 } ]}],
      	  [{"key":"data","value": "3_1"}, {"key": "obj", "value": [ { "id": 3, "row_id": 1, "data": "3_1", "col2": 4 }, { "id": 3, "row_id": 2, "data": "3_2", "col2": 4 }, { "id": 3, "row_id": 3, "data": "3_3", "col2": 4 } ]}]
      	]
      ]
    },
    {
      "name": "System catalog ",
      "query": [
        "set @var = 'test' ",
        "select * from sys#catalogs ",
        "select * from sys#variables ",
        "select * from sys#c.tables ",
        "select * from sys#c.columns ",
        "select * from sys#c.functions ",
        "select * from sys#c.indices "
      ],
      "expectedResultSets": [
        [
          [{"key":"alias","value": "c"}, {"key":"name", "value": "Test#c"}]
        ],
        [
          [{"key":"name","value": "var"}, {"key":"value", "value": "test"}]
        ],
        [
          [{"key":"name","value": "source"}, {"key":"columns","value": ["col1", "col2"]}],
          [{"key":"name","value": "data"}, {"key":"columns","value": ["id", "row_id", "data"]}],
          [{"key":"name","value": "strings"}, {"key":"columns","value": ["id", "string1", "string2"]}],
          [{"key":"name","value": "agg_data"}, {"key":"columns","value": ["id", "value"]}]
        ],
        [
          [{"key":"table","value": "source"},{"key":"name","value": "col1"}, {"key":"custom","value": 4}],
          [{"key":"table","value": "source"}, {"key":"name","value": "col2"}, {"key":"custom","value": 4}],
          [{"key":"table","value": "data"}, {"key":"name","value": "id"}, {"key":"custom","value": 2}],
          [{"key":"table","value": "data"},{"key":"name","value": "row_id"}, {"key":"custom","value": 6}],
          [{"key":"table","value": "data"}, {"key":"name","value": "data"}, {"key":"custom","value": 4}],
          [{"key":"table","value": "strings"}, {"key":"name","value": "id"}, {"key":"custom","value": 2}],
          [{"key":"table","value": "strings"}, {"key":"name","value": "string1"}, {"key":"custom","value": 7}],
          [{"key":"table","value": "strings"}, {"key":"name","value": "string2"}, {"key":"custom","value": 7}],
          [{"key":"table","value": "agg_data"}, {"key":"name","value": "id"}, {"key":"custom","value": 2}],
          [{"key":"table","value": "agg_data"}, {"key":"name","value": "value"}, {"key":"custom","value": 5}]
        ],
        [],
        []
      ]
    }
  ]
}