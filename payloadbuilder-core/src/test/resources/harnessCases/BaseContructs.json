{
  "name": "BaseContructs",
  "catalogs": [
    {
      "alias": "c",
      "tables": [
        {
          "name": "source",
          "columns": [ "col1", "col2" ],
          "types": [ {"type": "Int"}, {"type": "Int"} ],
          "rows": [
            [1, 2],
            [3, 4],
            [5, 6]
          ]
        },
        {
          "name": "source2",
          "columns": [ "col1", "col2" ],
          "types": [ {"type": "Int"}, {"type": "Int"} ],
          "rows": [
            [1, 2],
            [1, 2],
            [5, 6],
            [5, 6],
            [7, 60]
          ]
        },
        {
          "name": "data",
          "columns": [ "id", "row_id", "data" ],
          "types": [ {"type": "Int"}, {"type": "Int"}, {"type": "String"} ],
          "rows": [
            [1, 1, "1_1"],
            [1, 2, "1_2"],
            [2, 1, "2_1"],
            [3, 1, "3_1"],
            [3, 2, "3_2"],
            [3, 3, "3_3"]
          ]
        },
        {
          "name": "data2",
          "columns": [ "id", "value" ],
          "types": [ {"type": "Int"}, {"type": "Int"} ],
          "rows": [
            [1, 1],
            [1, 2],
            [2, 1],
            [3, 1],
            [3, 2]
          ]
        },
        {
          "name": "strings",
          "columns": [ "id", "string1", "string2" ],
          "types": [ {"type": "Int"}, {"type": "String"}, {"type": "String"} ],
          "rows": [
            [1, "some string 1", "123abc"],
            [2,  "hello world", "asd"],
            [3, "string 3", "2_1"],
            [4, "same little text", "$56"]
          ]
        },
        {
          "name": "agg_data",
          "columns": ["id", "value"],
          "types": [ {"type": "Int"}, {"type": "Int"} ],
          "rows": [
            [1, 20],
            [1, 10],
            [2, 30],
            [2, null],
            [3, 50],
            [3, 60]
          ]
        },
        {
          "name": "map_values",
          "columns": ["id", "value"],
          "types": [ {"type": "Int"}, {"type": "Any"} ],
          "rows": [
            [1, { "key": "03" }],
            [2, { "key": "02" }],
            [3, { "key": "01" }],
            [4, { "key2": "01" }],
            [5, { "key": "05" }],
            [6, { "key": "04" }]
          ]
        }
      ]
    },
    {
      "alias": "d",
      "tables": [
        {
          "name": "source",
          "columns": [ "col1", "col2" ],
          "types": [ {"type": "Int"}, {"type": "Int"} ],
          "rows": [
            [10, 20],
            [30, 40],
            [50, 60]
          ]
        }
      ]
    },
    {
      "alias": "complexColumns",
      "tables": [
        {
          "name": "table",
          "columns": [ "id", "table", "object" ],
          "types": [ {"type": "String"}, { "type": "String" }, { "type": "Object", "schema": [ { "name": "key", "type": { "type": "Int" } } ] } ],
          "rows": [
            [ "1", "[{ \"key\": 123, \"value\": 456 },{ \"key\": 789, \"value\": 101112 }]", { "key": 666 } ],
            [ "2", "[]", null ]
          ]
        }
      ]
    },
    {
      "alias": "ecom",
      "tables": [
        {
          "name": "product",
          "columns": [ "id", "name", "brand" ],
          "types": [ { "type": "String" }, { "type": "String" }, { "type": "String" } ],
          "rows": [
            [ "1", "product-1", "nike" ],
            [ "2", "product-2", "adidas" ]
          ]
        },
        {
          "name": "article",
          "columns": [ "id", "productId", "color" ],
          "types": [ { "type": "String" }, { "type": "String" }, { "type": "String" } ],
          "rows": [
            [ "1-1", "1", "black" ],
            [ "1-2", "1", "green" ],
            [ "2-1", "2", "white" ],
            [ "2-2", "2", "blue" ]
          ]
        },
        {
          "name": "variant",
          "columns": [ "id", "articleId", "size" ],
          "types": [ { "type": "String" }, { "type": "String" }, { "type": "String" } ],
          "rows": [
            [ "1-1-1", "1-1", "M" ],
            [ "1-1-2", "1-1", "L" ],
            [ "1-2-1", "1-2", "S" ],
            [ "1-2-2", "1-2", "XL" ],
            [ "2-1-1", "2-1", "M" ],
            [ "2-1-2", "2-1", "XL" ],
            [ "2-2-1", "2-2", "L" ],
            [ "2-2-2", "2-2", "XXL" ]
          ]
        },
        {
          "name": "variantprice",
          "columns": [ "id", "price" ],
          "types": [ { "type": "String" }, { "type": "Decimal" } ],
          "rows": [
            [ "1-1-1",  10.10 ],
            [ "1-1-2",  20.10 ],
            [ "1-2-1",  20.10 ],
            [ "1-2-2",  30.10 ],
            [ "2-1-1",  15.10 ],
            [ "2-1-2",  25.10 ],
            [ "2-2-1",  30.10 ],
            [ "2-2-2",  35.10 ]
          ]
        }
      ]
    }
  ],
  "cases": [
    {
      "name": "Cross apply expression scan",
      "query": [
        "--set @@debugplan = true ",
        "use complexColumns ",
        "select t.id, x.* ",
        "from \"table\" t ",
        "cross apply (totable(json_value(t.\"table\"))) x "
      ],
      "expectedResultSets": [
        [
          [{ "key": "id", "value": 1 },{ "key": "key", "value": 123 },{ "key": "value", "value": 456 }],
          [{ "key": "id", "value": 1 },{ "key": "key", "value": 789 },{ "key": "value", "value": 101112 }]
        ]
      ]
    },
    {
      "name": "Table scan options",
      "description": "Test harness put's the test_array option into a variable",
      "query": [
        "select col1 ",
        "from source t with (test_array = array(1,2,3))",
        "",
        "select @test_array"
      ],
      "expectedResultSets": [
        [
          [{ "key": "col1", "value": 1 }],
          [{ "key": "col1", "value": 3 }],
          [{ "key": "col1", "value": 5 }]
        ],
        [
          [{ "key": "test_array", "value": [1,2,3] }]
        ]
      ]
    },
    {
      "name": "Outer apply expression scan",
      "query": [
        "use complexColumns ",
        "select t.id, x.* ",
        "from \"table\" t ",
        "outer apply (totable(json_value(t.\"table\"))) x "
      ],
      "expectedResultSets": [
        [
          [{ "key": "id", "value": 1 },{ "key": "key", "value": 123 },{ "key": "value", "value": 456 }],
          [{ "key": "id", "value": 1 },{ "key": "key", "value": 789 },{ "key": "value", "value": 101112 }],
          [{ "key": "id", "value": 2 },{ "key": "key", "value": null },{ "key": "value", "value": null }]
        ]
      ]
    },
    {
      "name": "e-com PDP",
      "query": [
        "use ecom ",
        "--set @@debugplan = true ",
        "select p.id productNumber",
        ", p.name ",
        ", ( ",
        "    select p.brand ",
        "    for object ",
        "  ) options ",
        ", ( ",
        "    select aRow.articleId articleNumber ",
        "    , aRow.color ",
        "    , ( ",
        "         select count(1) as cnt ",
        "         from (aRow.v) vRow ",
        "         group by vRow.articleId ",
        "      ) variantCount ",
        "    , ( ",
        "        select vRow.id variantNumber ",
        "        , vRow.size ",
        "        , p.id           productNumber    -- outer ref 2 steps up ",
        "        , aRow.articleId articleNumber    -- outer ref 1 step up ",
        "        from (aRow.v) vRow ",
        "        for object_array ",
        "      ) variants ",
        "    from (a) aRow ",
        "    order by aRow.articleId ",
        "    for object_array ",
        "  ) articles ",
        "from product p ",
        "inner populate join ( ",
        "  select a.productId ",
        "  , a.id     articleId ",
        "  , a.color ",
        "  , v ",
        "  from article a ",
        "  inner populate join variant v ",
        "    on v.articleId = a.id ",
        ") a ",
        "  on a.productId = p.id "
      ],
      "expectedResultSets": [
        [
          [{ "key": "productNumber", "value": 1 },{ "key": "name", "value": "product-1" },{ "key": "options", "value": { "brand": "nike" } },{ "key": "articles", "value": [ { "articleNumber": "1-1", "color": "black", "variantCount": 2, "variants": [{"variantNumber":"1-1-1", "size":"M", "productNumber":"1", "articleNumber":"1-1"}, {"variantNumber":"1-1-2", "size":"L",  "productNumber":"1", "articleNumber":"1-1"}]}, { "articleNumber": "1-2", "color": "green" , "variantCount": 2, "variants": [{"variantNumber":"1-2-1", "size":"S", "productNumber":"1", "articleNumber":"1-2"}, {"variantNumber":"1-2-2", "size":"XL",  "productNumber":"1", "articleNumber":"1-2"}]} ]}],
          [{ "key": "productNumber", "value": 2 },{ "key": "name", "value": "product-2" },{ "key": "options", "value": { "brand": "adidas" } },{ "key": "articles", "value": [ { "articleNumber": "2-1", "color": "white", "variantCount": 2, "variants": [{"variantNumber":"2-1-1", "size":"M", "productNumber":"2", "articleNumber":"2-1"}, {"variantNumber":"2-1-2", "size":"XL", "productNumber":"2", "articleNumber":"2-1"}]}, { "articleNumber": "2-2", "color": "blue", "variantCount": 2, "variants": [{"variantNumber":"2-2-1", "size":"L", "productNumber":"2", "articleNumber":"2-2"}, {"variantNumber":"2-2-2", "size":"XXL", "productNumber":"2", "articleNumber":"2-2"}]} ]}]
        ]
      ]
    },
    {
      "name": "e-com PLP",
      "query": [
        "use ecom ",
        "--set @@printplan = true ",
        "select a.id articleNumber ",
        ",  p.name ",
        ",  a.color ",
        ",  price.lowestPrice ",
        "from article a ",
        "inner join product p ",
        "  on p.id = a.productId ",
        "inner join ( ",
        "  select v.articleId, min(vp.price) lowestPrice ",
        "  from variant v ",
        "  inner join variantprice vp ",
        "    on vp.id = v.id ",
        "  group by v.articleId ",
        ") price ",
        "  on price.articleId = a.id "
      ],
      "expectedResultSets": [
        [
          [{ "key": "articleNumber", "value": "1-1" },{ "key": "name", "value": "product-1"},{ "key": "color", "value": "black"},{ "key": "lowestPrice", "value": 10.1 }],
          [{ "key": "articleNumber", "value": "1-2" },{ "key": "name", "value": "product-1"},{ "key": "color", "value": "green"},{ "key": "lowestPrice", "value": 20.1 }],
          [{ "key": "articleNumber", "value": "2-1" },{ "key": "name", "value": "product-2"},{ "key": "color", "value": "white"},{ "key": "lowestPrice", "value": 15.1 }],
          [{ "key": "articleNumber", "value": "2-2" },{ "key": "name", "value": "product-2"},{ "key": "color", "value": "blue" },{ "key": "lowestPrice", "value": 30.1 }]
        ]
      ]
    },
    {
      "name": "Correlated cross join -> error",
      "query": [
        "select * from data d cross join (select * from data d1 where d1.id = d.id) x"
      ],
      "expectedException": "se.kuseman.payloadbuilder.core.parser.ParseException",
      "expectedMessageContains": "d.id cannot be bound"
    },
    {
      "name": "Like",
      "query": [
        "select 'hello' like '%ell%' _like, 'hello' not like '%ell%' _notLike "
      ],
      "expectedResultSets": [
        [
          [{ "key": "_like", "value": true }, { "key": "_notLike", "value": false }]
        ]
      ]
    },
    {
      "name": "Distinct",
      "query": [
        "select distinct d.row_id, length(data) len from data d"
      ],
      "expectedResultSets": [
        [
          [{ "key": "row_id", "value": 3 }, { "key": "len", "value": 3 }],
          [{ "key": "row_id", "value": 2 }, { "key": "len", "value": 3 }],
          [{ "key": "row_id", "value": 1 }, { "key": "len", "value": 3 }]
        ]
      ]
    },
    {
      "name": "Distinct with group by ",
      "query": [
        "--set @@printplan = 1 ",
        "select distinct sum(value) value from data2 d group by id"
      ],
      "expectedResultSets": [
        [
          [{ "key": "value", "value": 3 }],
          [{ "key": "value", "value": 1 }]
        ]
      ]
    },
    {
      "name": "Distinct asterisk",
      "query": [
        "--set @@printplan = true ",
        "select distinct * from source2"
      ],
      "expectedResultSets": [
        [
          [{ "key": "col1", "value": 1 }, { "key": "col2", "value": 2 }],
          [{ "key": "col1", "value": 5 }, { "key": "col2", "value": 6 }],
          [{ "key": "col1", "value": 7 }, { "key": "col2", "value": 60 }]
        ]
      ]
    },
    {
      "name": "Agg. functions",
      "query": [
        "select id, count(1)                          count_const ",
        ",          count(*)                          count_ast ",
        ",          count(value)                      count_col ",

        ",          max(2)                            max_const ",
        ",          max(value)                        max_col ",
        ",          max(cast(value + 0.1 as decimal)) max_col_decimal ",

        ",          min(3)                            min_const ",
        ",          min(value)                        min_col ",
        ",          min(cast(value + 0.1 as decimal)) min_col_decimal ",

        ",          sum(4)                            sum_const ",
        ",          sum(value)                        sum_col ",
        ",          sum(cast(value + 0.1 as decimal)) sum_col_decimal ",

        ",          avg(5)                            avg_const ",
        ",          avg(value)                        avg_col ",
        ",          avg(cast(value + 0.1 as decimal)) avg_col_decimal ",

        ",          object('id', id, 'value', value)  obj ",
        ",          array(id, value)                  arr ",
        ",          object_array(id, value)           obj_arr ",
        ",          array(1,2,3)                      arr_const ",
        ",          object('id', 123, 'value', 10D)   obj_const ",

        "from agg_data ",
        "group by id ",
        "order by id "
      ],
      "expectedResultSets": [
        [
          [{ "key": "id", "value": 1 },{ "key": "count_const", "value": 2 },{ "key": "count_ast", "value": 2 },{ "key": "count_col", "value": 2 },{ "key": "max_const", "value": 2 },{ "key": "max_col", "value": 20 },{ "key": "max_col_decimal", "value": 20.100000 },{ "key": "min_const", "value": 3 },{ "key": "min_col", "value": 10 },{ "key": "min_col_decimal", "value": 10.100000 },{ "key": "sum_const", "value": 8 },{ "key": "sum_col", "value": 30  },{ "key": "sum_col_decimal", "value": 30.200000  },{ "key": "avg_const", "value": 5 },{ "key": "avg_col", "value": 15 },{ "key": "avg_col_decimal", "value": 15.100000 },{ "key": "obj", "value": { "id":1, "value": 20 } },{ "key": "arr", "value": [ 1, 20, 1, 10   ] },{ "key": "obj_arr", "value": [ { "id": 1, "value": 20 }, { "id": 1, "value": 10   } ] },{ "key": "arr_const", "value": [1, 2, 3]},{ "key": "obj_const", "value": {"id": 123, "value": 10.0}}],
          [{ "key": "id", "value": 2 },{ "key": "count_const", "value": 2 },{ "key": "count_ast", "value": 2 },{ "key": "count_col", "value": 1 },{ "key": "max_const", "value": 2 },{ "key": "max_col", "value": 30 },{ "key": "max_col_decimal", "value": 30.100000 },{ "key": "min_const", "value": 3 },{ "key": "min_col", "value": 30 },{ "key": "min_col_decimal", "value": 30.100000 },{ "key": "sum_const", "value": 8 },{ "key": "sum_col", "value": 30  },{ "key": "sum_col_decimal", "value": 30.100000  },{ "key": "avg_const", "value": 5 },{ "key": "avg_col", "value": 30 },{ "key": "avg_col_decimal", "value": 30.100000 },{ "key": "obj", "value": { "id":2, "value": 30 } },{ "key": "arr", "value": [ 2, 30, 2, null ] },{ "key": "obj_arr", "value": [ { "id": 2, "value": 30 }, { "id": 2, "value": null } ] },{ "key": "arr_const", "value": [1, 2, 3]},{ "key": "obj_const", "value": {"id": 123, "value": 10.0}}],
          [{ "key": "id", "value": 3 },{ "key": "count_const", "value": 2 },{ "key": "count_ast", "value": 2 },{ "key": "count_col", "value": 2 },{ "key": "max_const", "value": 2 },{ "key": "max_col", "value": 60 },{ "key": "max_col_decimal", "value": 60.099998 },{ "key": "min_const", "value": 3 },{ "key": "min_col", "value": 50 },{ "key": "min_col_decimal", "value": 50.099998 },{ "key": "sum_const", "value": 8 },{ "key": "sum_col", "value": 110 },{ "key": "sum_col_decimal", "value": 110.199996 },{ "key": "avg_const", "value": 5 },{ "key": "avg_col", "value": 55 },{ "key": "avg_col_decimal", "value": 55.099998 },{ "key": "obj", "value": { "id":3, "value": 50 } },{ "key": "arr", "value": [ 3, 50, 3, 60   ] },{ "key": "obj_arr", "value": [ { "id": 3, "value": 50 }, { "id": 3, "value": 60   } ] },{ "key": "arr_const", "value": [1, 2, 3]},{ "key": "obj_const", "value": {"id": 123, "value": 10.0}}]
        ]
      ]
    },
    {
      "name": "Group by. Single value etc.",
      "query": [
        "select id * id               single    -- Only single values included in expression ",
        ",      id * row_id           mixed     -- Mixed single value and grouped values ",
        ",      row_id * row_id       \"group\" -- Only group values ",
        "from data ",
        "group by id ",
        "order by id "
      ],
      "expectedResultSets": [
        [
          [{ "key": "single", "value": 1 },{ "key": "mixed", "value": [1, 2]    },{ "key": "group", "value": [1, 4]    }],
          [{ "key": "single", "value": 4 },{ "key": "mixed", "value": [2]       },{ "key": "group", "value": [1]       }],
          [{ "key": "single", "value": 9 },{ "key": "mixed", "value": [3, 6, 9] },{ "key": "group", "value": [1, 4, 9] }]
        ]
      ]
    },
    {
      "name": "Group by with asterisk projection",
      "query": [
        "select * ",
        "from data d ",
        "group by id "
      ],
      "expectedResultSets": [
        [
          [{ "key": "id", "value": [1,1  ] },{ "key": "row_id", "value": [1, 2]    },{ "key": "data", "value": ["1_1", "1_2"        ]}],
          [{ "key": "id", "value": [2    ] },{ "key": "row_id", "value": [1]       },{ "key": "data", "value": ["2_1"               ]}],
          [{ "key": "id", "value": [3,3,3] },{ "key": "row_id", "value": [1, 2, 3] },{ "key": "data", "value": ["3_1", "3_2", "3_3" ]}]
        ]
      ]
    },
    {
      "name": "Group by with asterisk projection: manually expanded",
      "description": "Note here that the grouped column id is not an array since this is the ANSI sql standard.",
      "query": [
        "select d.id, d.row_id, d.data ",
        "from data d ",
        "group by id "
      ],
      "expectedResultSets": [
        [
          [{ "key": "id", "value": 1 },{ "key": "row_id", "value": [1, 2]    },{ "key": "data", "value": ["1_1", "1_2"        ]}],
          [{ "key": "id", "value": 2 },{ "key": "row_id", "value": [1]       },{ "key": "data", "value": ["2_1"               ]}],
          [{ "key": "id", "value": 3 },{ "key": "row_id", "value": [1, 2, 3] },{ "key": "data", "value": ["3_1", "3_2", "3_3" ]}]
        ]
      ]
    },
    {
      "name": "Group by with non qualified asterisk projection on populated join",
      "query": [
        "select * ",
        "from data d ",
        "inner populate join source s ",
        "  on s.col1 = d.id ",
        "group by d.id "
      ],
      "expectedResultSets": [
        [
          [{ "key": "id", "value": [1,1  ] },{ "key": "row_id", "value": [1, 2]    },{ "key": "data", "value": ["1_1", "1_2"        ]}, { "key": "s", "value": [[{"col1": 1, "col2": 2}], [{"col1": 1, "col2": 2}]] } ],
          [{ "key": "id", "value": [3,3,3] },{ "key": "row_id", "value": [1, 2, 3] },{ "key": "data", "value": ["3_1", "3_2", "3_3" ]}, { "key": "s", "value": [[{"col1": 3, "col2": 4}], [{"col1": 3, "col2": 4}], [{"col1": 3, "col2": 4}]] } ]
        ]
      ]
    },
    {
      "name": "Group by with non qualified asterisk projection on populated join: manually expanded",
      "description": "Note here that the grouped column id is not an array since this is the ANSI sql standard.",
      "query": [
        "select d.id, d.row_id, d.data, s ",
        "from data d ",
        "inner populate join source s ",
        "  on s.col1 = d.id ",
        "group by d.id "
      ],
      "expectedResultSets": [
        [
          [{ "key": "id", "value": 1 },{ "key": "row_id", "value": [1, 2]    },{ "key": "data", "value": ["1_1", "1_2"        ]}, { "key": "s", "value": [[{"col1": 1, "col2": 2}], [{"col1": 1, "col2": 2}]] } ],
          [{ "key": "id", "value": 3 },{ "key": "row_id", "value": [1, 2, 3] },{ "key": "data", "value": ["3_1", "3_2", "3_3" ]}, { "key": "s", "value": [[{"col1": 3, "col2": 4}], [{"col1": 3, "col2": 4}], [{"col1": 3, "col2": 4}]] } ]
        ]
      ]
    },
    {
      "name": "Group by with a qualified asterisk projection on populated join",
      "query": [
        "select s.* ",
        "from data d ",
        "inner populate join source s ",
        "  on s.col1 = d.id ",
        "group by d.id "
      ],
      "expectedResultSets": [
        [
          [{ "key": "col1", "value": [[1],[1]] },    { "key": "col2", "value": [[2], [2]] }],
          [{ "key": "col1", "value": [[3],[3],[3]] },{ "key": "col2", "value": [[4],[4],[4]] }]
        ]
      ]
    },
    {
      "name": "Group by with a qualified asterisk projection on populated join: manually expanded",
      "query": [
        "select s.col1, s.col2 ",
        "from data d ",
        "inner populate join source s ",
        "  on s.col1 = d.id ",
        "group by d.id "
      ],
      "expectedResultSets": [
        [
          [{ "key": "col1", "value": [[1],[1]] },    { "key": "col2", "value": [[2], [2]] }],
          [{ "key": "col1", "value": [[3],[3],[3]] },{ "key": "col2", "value": [[4],[4],[4]] }]
        ]
      ]
    },
    {
      "name": "Group by with mixed qualified and non qualified columns",
      "query": [
        "select d.id ",
        ",      max(row_id) ",
        "from data d",
        "group by d.id ",
        "order by id "
      ],
      "expectedResultSets": [
        [
          [{ "key": "id", "value": 1 },{ "key": "max(d.row_id)", "value": 2 }],
          [{ "key": "id", "value": 2 },{ "key": "max(d.row_id)", "value": 1 }],
          [{ "key": "id", "value": 3 },{ "key": "max(d.row_id)", "value": 3 }]
        ]
      ]
    },
    {
      "name": "Group by with mixed qualified and non qualified columns (2)",
      "query": [
        "select id ",
        ",      max(row_id) ",
        "from data d",
        "group by id ",
        "order by d.id "
      ],
      "expectedResultSets": [
        [
          [{ "key": "id", "value": 1 },{ "key": "max(d.row_id)", "value": 2 }],
          [{ "key": "id", "value": 2 },{ "key": "max(d.row_id)", "value": 1 }],
          [{ "key": "id", "value": 3 },{ "key": "max(d.row_id)", "value": 3 }]
        ]
      ]
    },
    {
      "name": "Group by with having",
      "query": [
        "select id * id               single    -- Only single values included in expression ",
        ",      id * row_id           mixed     -- Mixed single value and grouped values ",
        ",      row_id * row_id       \"group\" -- Only group values ",
        "from data ",
        "group by id ",
        "having count(1) = 1 "
      ],
      "expectedResultSets": [
        [
          [{ "key": "single", "value": 4 },{ "key": "mixed", "value": [2]       },{ "key": "group", "value": [1]       }]
        ]
      ]
    },
    {
      "name": "Describe select, schema full, any vectors",
      "schemaLess": false,
      "typedVectors": false,
      "query": [
        "describe ",
        "select d.id ",
        ",      max(row_id) ",
        "from data d",
        "group by d.id ",
        "having count(1) = 1 ",
        "order by id "
      ],
      "expectedResultSets": [
        [
          [{ "key": "Node Id", "value": 3 }, { "key": "Parent Node Id", "value": null }, { "key": "Name", "value": "+- Sort"                 }, { "key": "Output", "value": "id (Any), max(d.row_id) (Any)"      }, { "key": "Catalog", "value": null     }, { "key": "Defined Values", "value": null                }, { "key": "Group By", "value": null     }, { "key": "Hash Time", "value": null           }, { "key": "Order By", "value": "[d.id ASC]" }, { "key": "Predicate", "value": null              }],
          [{ "key": "Node Id", "value": 2 }, { "key": "Parent Node Id", "value": 3 },    { "key": "Name", "value": "|  +- Filter"            }, { "key": "Output", "value": "id (Any), max(d.row_id) (Any)"      }, { "key": "Catalog", "value": null     }, { "key": "Defined Values", "value": null                }, { "key": "Group By", "value": null     }, { "key": "Hash Time", "value": null           }, { "key": "Order By", "value": null         }, { "key": "Predicate", "value": "__expr0 = 1"     }],
          [{ "key": "Node Id", "value": 1 }, { "key": "Parent Node Id", "value": 2 },    { "key": "Name", "value": "|     +- Hash Aggregate" }, { "key": "Output", "value": "id (Any), max(d.row_id) (Any)"      }, { "key": "Catalog", "value": null     }, { "key": "Defined Values", "value": "__expr0: count(1)" }, { "key": "Group By", "value": "[d.id]" }, { "key": "Hash Time", "value": "00:00:00.000" }, { "key": "Order By", "value": null         }, { "key": "Predicate", "value": null              }],
          [{ "key": "Node Id", "value": 0 }, { "key": "Parent Node Id", "value": 1 },    { "key": "Name", "value": "|        +- Scan: data"  }, { "key": "Output", "value": "id (Any), row_id (Any), data (Any)" }, { "key": "Catalog", "value": "Test#c" }, { "key": "Defined Values", "value": null                }, { "key": "Group By", "value": null     }, { "key": "Hash Time", "value": null           }, { "key": "Order By", "value": null         }, { "key": "Predicate", "value": null              }]
        ]
      ]
    },
    {
      "name": "Analyze select, schema full",
      "ignore": true,
      "_todo": "Add support for regex assert columns, this query contains times that isn't deterministic",
      "schemaLess": false,
      "query": [
        "analyze ",
        "select d.id ",
        ",      max(row_id) ",
        "from data d",
        "group by d.id ",
        "having count(1) = 1 ",
        "order by id "
      ],
      "expectedResultSets": [
        [
          [{ "key": "Node Id", "value": 3 }, { "key": "Name", "value": "+- Sort"                 }, { "key": "Output", "value": "id (Any), max(d.row_id) (Any)"      }, { "key": "Catalog", "value": null     }, { "key": "Defined Values", "value": null                }, { "key": "Group By", "value": null     }, { "key": "Hash Time", "value": null           }, { "key": "Order By", "value": "[d.id ASC]" }, { "key": "Predicate", "value": null              }],
          [{ "key": "Node Id", "value": 2 }, { "key": "Name", "value": "|  +- Filter"            }, { "key": "Output", "value": "id (Any), max(d.row_id) (Any)"      }, { "key": "Catalog", "value": null     }, { "key": "Defined Values", "value": null                }, { "key": "Group By", "value": null     }, { "key": "Hash Time", "value": null           }, { "key": "Order By", "value": null         }, { "key": "Predicate", "value": "__expr0 = 1"     }],
          [{ "key": "Node Id", "value": 1 }, { "key": "Name", "value": "|     +- Hash Aggregate" }, { "key": "Output", "value": "id (Any), max(d.row_id) (Any)"      }, { "key": "Catalog", "value": null     }, { "key": "Defined Values", "value": "__expr0: count(1)" }, { "key": "Group By", "value": "[d.id]" }, { "key": "Hash Time", "value": "00:00:00.000" }, { "key": "Order By", "value": null         }, { "key": "Predicate", "value": null              }],
          [{ "key": "Node Id", "value": 0 }, { "key": "Name", "value": "|        +- Scan: data"  }, { "key": "Output", "value": "id (Any), row_id (Any), data (Any)" }, { "key": "Catalog", "value": "Test#c" }, { "key": "Defined Values", "value": null                }, { "key": "Group By", "value": null     }, { "key": "Hash Time", "value": null           }, { "key": "Order By", "value": null         }, { "key": "Predicate", "value": null              }]
        ]
      ]
    },
    {
      "name": "Describe select, schema less",
      "schemaLess": true,
      "query": [
        "describe ",
        "select d.id ",
        ",      max(row_id) ",
        "from data d",
        "group by d.id ",
        "having count(1) = 1 ",
        "order by id "
      ],
      "expectedResultSets": [
        [
          [{ "key": "Node Id", "value": 3 }, { "key": "Parent Node Id", "value": null }, { "key": "Name", "value": "+- Sort"                 }, { "key": "Output", "value": "id (Any), max(d.row_id) (Any)"      }, { "key": "Catalog", "value": null     }, { "key": "Defined Values", "value": null                }, { "key": "Group By", "value": null     }, { "key": "Hash Time", "value": null           }, { "key": "Order By", "value": "[d.id ASC]" }, { "key": "Predicate", "value": null              }],
          [{ "key": "Node Id", "value": 2 }, { "key": "Parent Node Id", "value": 3 },    { "key": "Name", "value": "|  +- Filter"            }, { "key": "Output", "value": "id (Any), max(d.row_id) (Any)"      }, { "key": "Catalog", "value": null     }, { "key": "Defined Values", "value": null                }, { "key": "Group By", "value": null     }, { "key": "Hash Time", "value": null           }, { "key": "Order By", "value": null         }, { "key": "Predicate", "value": "__expr0 = 1"     }],
          [{ "key": "Node Id", "value": 1 }, { "key": "Parent Node Id", "value": 2 },    { "key": "Name", "value": "|     +- Hash Aggregate" }, { "key": "Output", "value": "id (Any), max(d.row_id) (Any)"      }, { "key": "Catalog", "value": null     }, { "key": "Defined Values", "value": "__expr0: count(1)" }, { "key": "Group By", "value": "[d.id]" }, { "key": "Hash Time", "value": "00:00:00.000" }, { "key": "Order By", "value": null         }, { "key": "Predicate", "value": null              }],
          [{ "key": "Node Id", "value": 0 }, { "key": "Parent Node Id", "value": 1 },    { "key": "Name", "value": "|        +- Scan: data"  }, { "key": "Output", "value": "d (Any)"                            }, { "key": "Catalog", "value": "Test#c" }, { "key": "Defined Values", "value": null                }, { "key": "Group By", "value": null     }, { "key": "Hash Time", "value": null           }, { "key": "Order By", "value": null         }, { "key": "Predicate", "value": null              }]
        ]
      ]
    },
    {
      "name": "if statement",
      "query": [
        "if (true) then ",
        "  select top 1 id from data ",
        "else ",
        " select top 1 col1 from source ",
        "end if "
      ],
      "expectedResultSets": [
        [
          [{ "key": "id", "value": 1 }]
        ]
      ]
    },
    {
      "name": "if statement (non folded)  ",
      "query": [
        "select @col1 = col1 from source where col1 = 10 ",
        "if (@col1 > 0) then ",
        "  select top 1 id from data ",
        "else ",
        " select top 1 col1 from source ",
        "end if "
      ],
      "expectedResultSets": [
        [
          [{ "key": "col1", "value": 1 }]
        ]
      ]
    },
    {
      "name": "if statement (reverse)",
      "query": [
        "if (false) then ",
        "  select top 1 id from data ",
        "else ",
        " select top 1 col1 from source ",
        "end if "
      ],
      "expectedResultSets": [
        [
          [{ "key": "col1", "value": 1 }]
        ]
      ]
    },
    {
      "name": "if statement (reverse non folded)",
      "query": [
        "select @col1 = col1 from source where col1 = 1  ",
        "if (@col1 > 0) then ",
        "  select top 1 id from data ",
        "else ",
        " select top 1 col1 from source ",
        "end if "
      ],
      "expectedResultSets": [
        [
          [{ "key": "id", "value": 1 }]
        ]
      ]
    },
    {
      "name": "Test variables are case in-sensitive",
      "query": [
        "set @varA = 'test' ",
        "set @VARB = 'test1' ",
        "set @vArc = 'test2' ",
        "select @vara col1,@VARb col2,@vaRc col3 "
      ],
      "expectedResultSets": [
        [
          [{ "key": "col1", "value": "test" }, { "key": "col2", "value": "test1" }, { "key": "col3", "value": "test2" }]
        ]
      ]
    },
    {
      "name": "Apply with sub query without table",
      "query": [
        "select * ",
        "from source s ",
        "outer apply ( ",
        "  select 1 col3 ",
        ") x "
      ],
      "expectedResultSets": [
        [
          [{ "key": "col1", "value": 1 }, { "key": "col2", "value": 2 }, { "key": "col3", "value": 1 }],
          [{ "key": "col1", "value": 3 }, { "key": "col2", "value": 4 }, { "key": "col3", "value": 1 }],
          [{ "key": "col1", "value": 5 }, { "key": "col2", "value": 6 }, { "key": "col3", "value": 1 }]
        ]
      ]
    },
    {
      "name": "Apply with sub query with join",
      "query": [
        "--set @@printplan = true ",
        "select x.* ",
        "from source s ",
        "outer populate apply ( ",
        "  select s.col2, d.data ",
        "  from source s ",
        "  inner join data d ",
        "    on  s.col1 = d.id ",
        "  order by s.col1 desc ",
        ") x "
      ],
      "expectedResultSets": [
        [
          [{ "key": "col2", "value": [4, 4, 4, 2, 2] }, { "key": "data", "value": ["3_1", "3_2", "3_3", "1_1", "1_2"] }],
          [{ "key": "col2", "value": [4, 4, 4, 2, 2] }, { "key": "data", "value": ["3_1", "3_2", "3_3", "1_1", "1_2"] }],
          [{ "key": "col2", "value": [4, 4, 4, 2, 2] }, { "key": "data", "value": ["3_1", "3_2", "3_3", "1_1", "1_2"] }]
        ]
      ]
    },
    {
      "name": "Apply with sub query with outer reference",
      "query": [
        "select * ",
        "from source s ",
        "outer apply ( ",
        "  select s.col1 col3 ",
        ") x "
      ],
      "expectedResultSets": [
        [
          [{ "key": "col1", "value": 1 }, { "key": "col2", "value": 2 }, { "key": "col3", "value": 1 }],
          [{ "key": "col1", "value": 3 }, { "key": "col2", "value": 4 }, { "key": "col3", "value": 3 }],
          [{ "key": "col1", "value": 5 }, { "key": "col2", "value": 6 }, { "key": "col3", "value": 5 }]
        ]
      ]
    },
    {
      "name": "Apply with sub query with outer computed reference",
      "query": [
        "select * ",
        "from source s ",
        "outer apply ( ",
        "  select s.col1 + s.col2 col3 ",
        ") x "
      ],
      "expectedResultSets": [
        [
          [{ "key": "col1", "value": 1 }, { "key": "col2", "value": 2 }, { "key": "col3", "value": 3 }],
          [{ "key": "col1", "value": 3 }, { "key": "col2", "value": 4 }, { "key": "col3", "value": 7 }],
          [{ "key": "col1", "value": 5 }, { "key": "col2", "value": 6 }, { "key": "col3", "value": 11 }]
        ]
      ]
    },
    {
      "name": "Asterisk select",
      "query": [
        "select * from source"
      ],
      "expectedResultSets": [
        [
          [{ "key": "col1", "value": 1 }, { "key": "col2", "value": 2 }],
          [{ "key": "col1", "value": 3 }, { "key": "col2", "value": 4 }],
          [{ "key": "col1", "value": 5 }, { "key": "col2", "value": 6 }]
        ]
      ]
    },
    {
      "name": "Sub query with a single table source",
      "query": [
        "select x.col1, x.col2 from (select * from source) x"
      ],
      "expectedResultSets": [
        [
          [{ "key": "col1", "value": 1 }, { "key": "col2", "value": 2 }],
          [{ "key": "col1", "value": 3 }, { "key": "col2", "value": 4 }],
          [{ "key": "col1", "value": 5 }, { "key": "col2", "value": 6 }]
        ]
      ]
    },
    {
      "name": "Lambda functions",
      "query": [
        "select r.Value, ",
        " r1.map(x -> r.Value + x.Value) map, ",
        " r1.filter(x -> (r.Value - x.Value) > 0).map(x -> x.Value) filter, ",
        " r1.flatMap(x -> array(r.Value, x.Value)) flatMap, ",
        " r1.any(x -> x.Value > 0) any,",
        " r1.all(x -> r.Value - x.Value > 0) all, ",
        " r1.none(x -> r.Value + x.Value > 10) none, ",
        " r1.flatMap(x -> array(r.Value, x.Value)).distinct() distinct ",

        "from range(1, 4) r ",
        "inner populate join range(1, 11) r1 ",
        "  on r1.Value % 3 + 1 = r.Value ",
        "order by r.value "
      ],
      "expectedResultSets": [
        [
          [{ "key": "Value", "value": 1 },{ "key": "map", "value": [4,7,10] },  { "key": "filter", "value": [] }, { "key": "flatMap", "value": [1, 3, 1, 6, 1, 9] },     {"key":"any","value":true},{"key":"all","value":false},{"key":"none","value":true},{"key":"distinct","value":[1, 9, 3, 6]}],
          [{ "key": "Value", "value": 2 },{ "key": "map", "value": [3,6,9,12] },{ "key": "filter", "value": [1] },{ "key": "flatMap", "value": [2, 1, 2, 4, 2, 7, 2, 10] },{"key":"any","value":true},{"key":"all","value":false},{"key":"none","value":false},{"key":"distinct","value":[2, 10, 7, 4, 1]}],
          [{ "key": "Value", "value": 3 },{ "key": "map", "value": [5,8,11] },  { "key": "filter", "value": [2] },{ "key": "flatMap", "value": [3, 2, 3, 5, 3, 8] },     {"key":"any","value":true},{"key":"all","value":false},{"key":"none","value":false},{"key":"distinct","value":[3, 8, 2, 5]}]
        ]
      ]
    },
    {
      "name": "Aggregate functions in scalar mode",
      "query": [
        "select r.Value, ",
        " r1.map(x -> r.Value + x.Value)         all, ",
        " r1.map(x -> r.Value + x.Value).sum()   sum, ",
        " r1.map(x -> r.Value + x.Value).min()   min, ",
        " r1.map(x -> r.Value + x.Value).max()   max, ",
        " r1.map(x -> r.Value + x.Value).avg()   avg, ",
        " r1.map(x -> r.Value + x.Value).count() count ",

        "from range(1, 4) r ",
        "inner populate join range(1, 11) r1 ",
        "  on r1.Value % 3 + 1 = r.Value ",
        "order by r.value"
      ],
      "expectedResultSets": [
        [
          [{ "key": "Value", "value": 1 },{ "key": "all", "value": [4,7,10]   },{ "key": "sum", "value": 21 }, { "key": "min", "value": 4 }, { "key": "max", "value": 10 }, {"key":"avg", "value": 7}, {"key":"count", "value": 3} ],
          [{ "key": "Value", "value": 2 },{ "key": "all", "value": [3,6,9,12] },{ "key": "sum", "value": 30 }, { "key": "min", "value": 3 }, { "key": "max", "value": 12 }, {"key":"avg", "value": 7}, {"key":"count", "value": 4} ],
          [{ "key": "Value", "value": 3 },{ "key": "all", "value": [5,8,11]   },{ "key": "sum", "value": 24 }, { "key": "min", "value": 5 }, { "key": "max", "value": 11 }, {"key":"avg", "value": 8}, {"key":"count", "value": 3} ]
        ]
      ]
    },
    {
      "name": "Order by",
      "query": [
        "select col1 from source order by col2 desc"
      ],
      "expectedResultSets": [
        [
          [{ "key": "col1", "value": 5 }],
          [{ "key": "col1", "value": 3 }],
          [{ "key": "col1", "value": 1 }]
        ]
      ]
    },
    {
      "name": "Order by nested value",
      "query": [
        "--set @@debugplan = true ",
        "select *, m.value.key from map_values m order by cast(m.value.key as int) desc nulls last"
      ],
      "expectedResultSets": [
        [
          [{ "key": "id", "value": 5 }, { "key": "value", "value": {"key": "05"}  }, { "key": "key", "value": "05" } ],
          [{ "key": "id", "value": 6 }, { "key": "value", "value": {"key": "04"}  }, { "key": "key", "value": "04" } ],
          [{ "key": "id", "value": 1 }, { "key": "value", "value": {"key": "03"}  }, { "key": "key", "value": "03" } ],
          [{ "key": "id", "value": 2 }, { "key": "value", "value": {"key": "02"}  }, { "key": "key", "value": "02" } ],
          [{ "key": "id", "value": 3 }, { "key": "value", "value": {"key": "01"}  }, { "key": "key", "value": "01" } ],
          [{ "key": "id", "value": 4 }, { "key": "value", "value": {"key2": "01"} }, { "key": "key", "value": null } ]
        ]
      ]
    },    
    {
      "name": "Order by function with internal column",
      "query": [
        "select col1 from source order by hash(col2) asc"
      ],
      "expectedResultSets": [
        [
          [{ "key": "col1", "value": 1 }],
          [{ "key": "col1", "value": 3 }],
          [{ "key": "col1", "value": 5 }]
        ]
      ]
    },
    {
      "name": "Order by expression",
      "query": [
        "select id - row_id newCol from data order by newcol desc"
      ],
      "expectedResultSets": [
        [
          [{ "key": "newCol", "value": 2 }],
          [{ "key": "newCol", "value": 1 }],
          [{ "key": "newCol", "value": 1 }],
          [{ "key": "newCol", "value": 0 }],
          [{ "key": "newCol", "value": 0 }],
          [{ "key": "newCol", "value": -1 }]
        ]
      ]
    },
    {
      "name": "Order by expression function",
      "query": [
        "select hash(id, row_id) newCol, id from data order by newcol desc"
      ],
      "expectedResultSets": [
        [
          [{ "key": "newCol", "value": 23387 }, { "key": "id", "value": 3 }],
          [{ "key": "newCol", "value": 23386 }, { "key": "id", "value": 3 }],
          [{ "key": "newCol", "value": 23385 }, { "key": "id", "value": 3 }],
          [{ "key": "newCol", "value": 23348 }, { "key": "id", "value": 2 }],
          [{ "key": "newCol", "value": 23312 }, { "key": "id", "value": 1 }],
          [{ "key": "newCol", "value": 23311 }, { "key": "id", "value": 1 }]
        ]
      ]
    },
    {
      "name": "Order by expression function with asterisk",
      "description": "Make sure that computed columns are hidden from resulting schema",
      "query": [
        "select concat(id, row_id) newCol, * from data order by newcol desc"
      ],
      "expectedResultSets": [
        [
          [{ "key": "newCol", "value": 33 }, { "key": "id", "value": 3 }, { "key": "row_id", "value": 3 }, { "key": "data", "value": "3_3" }],
          [{ "key": "newCol", "value": 32 }, { "key": "id", "value": 3 }, { "key": "row_id", "value": 2 }, { "key": "data", "value": "3_2" }],
          [{ "key": "newCol", "value": 31 }, { "key": "id", "value": 3 }, { "key": "row_id", "value": 1 }, { "key": "data", "value": "3_1" }],
          [{ "key": "newCol", "value": 21 }, { "key": "id", "value": 2 }, { "key": "row_id", "value": 1 }, { "key": "data", "value": "2_1" }],
          [{ "key": "newCol", "value": 12 }, { "key": "id", "value": 1 }, { "key": "row_id", "value": 2 }, { "key": "data", "value": "1_2" }],
          [{ "key": "newCol", "value": 11 }, { "key": "id", "value": 1 }, { "key": "row_id", "value": 1 }, { "key": "data", "value": "1_1" }]
        ]
      ]
    },
    {
      "name": "Order by ordinal computed",
      "query": [
        "select data, id - row_id newCol from data order by 2 desc"
      ],
      "expectedResultSets": [
        [
          [{ "key": "data", "value": "3_1" }, { "key": "newCol", "value": 2 } ],
          [{ "key": "data", "value": "2_1" }, { "key": "newCol", "value": 1 } ],
          [{ "key": "data", "value": "3_2" }, { "key": "newCol", "value": 1 } ],
          [{ "key": "data", "value": "1_1" }, { "key": "newCol", "value": 0 } ],
          [{ "key": "data", "value": "3_3" }, { "key": "newCol", "value": 0 } ],
          [{ "key": "data", "value": "1_2" }, { "key": "newCol", "value": -1 }]
        ]
      ]
    },
    {
      "name": "Order by ordinal computed with asterisk ",
      "query": [
        "--set @@printplan = true ",
        "select id - row_id, * from data order by 1 desc"
      ],
      "expectedResultSets": [
        [
          [{ "key": "id - row_id", "value": 2 }, { "key": "id", "value": 3 }, { "key": "row_id", "value": 1 }, { "key": "data", "value": "3_1" } ],
          [{ "key": "id - row_id", "value": 1 }, { "key": "id", "value": 2 }, { "key": "row_id", "value": 1 }, { "key": "data", "value": "2_1" } ],
          [{ "key": "id - row_id", "value": 1 }, { "key": "id", "value": 3 }, { "key": "row_id", "value": 2 }, { "key": "data", "value": "3_2" } ],
          [{ "key": "id - row_id", "value": 0 }, { "key": "id", "value": 1 }, { "key": "row_id", "value": 1 }, { "key": "data", "value": "1_1" } ],
          [{ "key": "id - row_id", "value": 0 }, { "key": "id", "value": 3 }, { "key": "row_id", "value": 3 }, { "key": "data", "value": "3_3" } ],
          [{ "key": "id - row_id", "value": -1 }, { "key": "id", "value": 1 }, { "key": "row_id", "value": 2 }, { "key": "data", "value": "1_2" } ]
        ]
      ]
    },
    {
      "name": "Order by ordinal non computed",
      "query": [
        "select id newCol from data order by 1 desc"
      ],
      "expectedResultSets": [
        [
          [{ "key": "newCol", "value": 3 }],
          [{ "key": "newCol", "value": 3 }],
          [{ "key": "newCol", "value": 3 }],
          [{ "key": "newCol", "value": 2 }],
          [{ "key": "newCol", "value": 1 }],
          [{ "key": "newCol", "value": 1 }]
        ]
      ]
    },
    {
      "name": "Order by ordinal asterisk",
      "query": [
        "select * from data order by 1 desc"
      ],
      "expectedResultSets": [
        [
          [{ "key": "id", "value": 3 }, { "key": "row_id", "value": 1 }, { "key": "data", "value": "3_1" }],
          [{ "key": "id", "value": 3 }, { "key": "row_id", "value": 2 }, { "key": "data", "value": "3_2" }],
          [{ "key": "id", "value": 3 }, { "key": "row_id", "value": 3 }, { "key": "data", "value": "3_3" }],
          [{ "key": "id", "value": 2 }, { "key": "row_id", "value": 1 }, { "key": "data", "value": "2_1" }],
          [{ "key": "id", "value": 1 }, { "key": "row_id", "value": 1 }, { "key": "data", "value": "1_1" }],
          [{ "key": "id", "value": 1 }, { "key": "row_id", "value": 2 }, { "key": "data", "value": "1_2" }]
        ]
      ]
    },
    {
      "name": "Order by column non computed",
      "query": [
        "select id newCol from data order by newCol desc"
      ],
      "expectedResultSets": [
        [
          [{ "key": "newCol", "value": 3 }],
          [{ "key": "newCol", "value": 3 }],
          [{ "key": "newCol", "value": 3 }],
          [{ "key": "newCol", "value": 2 }],
          [{ "key": "newCol", "value": 1 }],
          [{ "key": "newCol", "value": 1 }]
        ]
      ]
    },
    {
      "name": "Subquery expression order by aliased column expression",
      "query": [
          "--set @@debugplan = true ",
          "select d.id, (select s2Row.row_id row_id from (s2) s2Row order by s2Row.row_id for array) val ",
          "from data d ",
          "inner join source s ",
          "  on s.col1 = d.id ",
          "inner populate join data s2 ",
          "  on s2.id = s.col1 "
      ],
      "expectedResultSets": [
        [
          [{ "key": "id", "value": 3 }, { "key": "val", "value": [1, 2, 3] }],
          [{ "key": "id", "value": 3 }, { "key": "val", "value": [1, 2, 3] }],
          [{ "key": "id", "value": 3 }, { "key": "val", "value": [1, 2, 3] }],
          [{ "key": "id", "value": 1 }, { "key": "val", "value": [1, 2]    }],
          [{ "key": "id", "value": 1 }, { "key": "val", "value": [1, 2]    }]
        ]
      ]
    },
    {
      "name": "Subquery expression with for object_array single row",
      "query": [
          "--set @@debugplan = true ",
          "select ( select top 1 sRow.id id1, sRow.row_id id2 from (s2) sRow FOR OBJECT_ARRAY) value2 ",
          "from source s ",
          "inner populate join data s2 ",
          "  on s2.id = s.col1 "
      ],
      "expectedResultSets": [
        [
          [{ "key": "value2", "value": [{"id1": 3, "id2": 1}] } ],
          [{ "key": "value2", "value": [{"id1": 1, "id2": 1}] } ]
        ]
      ]
    },
    {
      "name": "Asterisk select in subquery with for object",
      "query": [
          "--set @@debugplan = true ",
          "select d.data, s.col2, ( select * from (s2) dRow FOR OBJECT) value2 ",
          "from data d ",
          "inner join source s ",
          "  on s.col1 = d.id ",
          "inner populate join data s2 ",
          "  on s2.id = s.col1 "
      ],
      "expectedResultSets": [
        [
          [{ "key": "data", "value": "3_1" }, { "key": "col2", "value": 4 }, { "key": "value2", "value": {"id":3, "row_id":1, "data": "3_1"} }],
          [{ "key": "data", "value": "3_2" }, { "key": "col2", "value": 4 }, { "key": "value2", "value": {"id":3, "row_id":1, "data": "3_1"} }],
          [{ "key": "data", "value": "3_3" }, { "key": "col2", "value": 4 }, { "key": "value2", "value": {"id":3, "row_id":1, "data": "3_1"} }],
          [{ "key": "data", "value": "1_1" }, { "key": "col2", "value": 2 }, { "key": "value2", "value": {"id":1, "row_id":1, "data": "1_1"} }],
          [{ "key": "data", "value": "1_2" }, { "key": "col2", "value": 2 }, { "key": "value2", "value": {"id":1, "row_id":1, "data": "1_1"} }]
        ]
      ]
    },
    {
      "name": "Multiple subquery expressions inside a subquery expression with a table source",
      "description": [
        "This is a regression test where we first resolve a column from current scope and since that was not an alias match",
        "we must also search in the outer scope which yielded an ambiguity which crashed but that is ok since we got a match in current scope",
        "and the query as a whole should work"
      ],
      "query": [
          "--set @@debugplan = true ",
          "select (select (select dRow.id for object) obj1, (select dRow.data for array) arr1 from (s2) dRow FOR OBJECT_ARRAY) value2 ",
          "from source s ",
          "inner join data d2 ",
          "  on d2.id = s.col1 ",
          "inner populate join data s2 ",
          "  on s2.id = s.col1 "
      ],
      "expectedResultSets": [
        [
          [{ "key": "value2", "value": [{"obj1":{"id":3}, "arr1":["3_1"]}, {"obj1":{"id":3}, "arr1":["3_2"]}, {"obj1":{"id":3}, "arr1":["3_3"]}]}],
          [{ "key": "value2", "value": [{"obj1":{"id":3}, "arr1":["3_1"]}, {"obj1":{"id":3}, "arr1":["3_2"]}, {"obj1":{"id":3}, "arr1":["3_3"]}]}],
          [{ "key": "value2", "value": [{"obj1":{"id":3}, "arr1":["3_1"]}, {"obj1":{"id":3}, "arr1":["3_2"]}, {"obj1":{"id":3}, "arr1":["3_3"]}]}],
          [{ "key": "value2", "value": [{"obj1":{"id":1}, "arr1":["1_1"]}, {"obj1":{"id":1}, "arr1":["1_2"]}]}],
          [{ "key": "value2", "value": [{"obj1":{"id":1}, "arr1":["1_1"]}, {"obj1":{"id":1}, "arr1":["1_2"]}]}]
        ]
      ]
    },
    {
      "name": "Mismatch schema and vectors",
      "description": [
        "Regression test where a projections planned schema did not matched the vecors due to ",
        "cast expression did not properly resolved a columnreference. Now we dig through all unary expressions and ",
        "try to find a one that has a column reference "
      ],
      "query": [
          "--set @@debugplan = true ",
          "select ( ",
          "  select s2.col1 one ",
          ", s2.col2 two ",
          "  from ( ",
          "   select cast(s2.col1 as int) col1, cast(s2.col2 as int) col2",
          "   from source s2 ",
          ") s2 ",
          "  for object_array ",
          " ) ourData",
          "from source s "
      ],
      "expectedResultSets": [
        [
          [{ "key": "ourData", "value": [{"one":1, "two":2}, {"one":3, "two":4}, {"one":5, "two":6}]}],
          [{ "key": "ourData", "value": [{"one":1, "two":2}, {"one":3, "two":4}, {"one":5, "two":6}]}],
          [{ "key": "ourData", "value": [{"one":1, "two":2}, {"one":3, "two":4}, {"one":5, "two":6}]}]
        ]
      ]
    },
    {
      "name": "Subquery expression order by column expression",
      "query": [
          "select d.id, (select s2Row.row_id from (s2) s2Row order by s2Row.row_id desc for array) val ",
          "from data d ",
          "inner join source s ",
          "  on s.col1 = d.id ",
          "inner populate join data s2 ",
          "  on s2.id = s.col1 "
      ],
      "expectedResultSets": [
        [
          [{ "key": "id", "value": 3 }, { "key": "val", "value": [3, 2, 1] }],
          [{ "key": "id", "value": 3 }, { "key": "val", "value": [3, 2, 1] }],
          [{ "key": "id", "value": 3 }, { "key": "val", "value": [3, 2, 1] }],
          [{ "key": "id", "value": 1 }, { "key": "val", "value": [2, 1]    }],
          [{ "key": "id", "value": 1 }, { "key": "val", "value": [2, 1]    }]
        ]
      ]
    },
    {
      "name": "Order by ordinal, out of range",
      "query": [
        "select id - row_id newCol from data order by 10 desc"
      ],
      "expectedException": "se.kuseman.payloadbuilder.core.QueryException",
      "expectedMessageContains": "ORDER BY position is out of range"
    },
    {
      "name": "Order by ordinal, asterisk",
      "query": [
        "select * from data order by 1 desc"
      ],
      "expectedResultSets": [
        [
          [{ "key": "id", "value": 3 }, { "key": "row_id", "value": 1 }, { "key": "data", "value": "3_1" }],
          [{ "key": "id", "value": 3 }, { "key": "row_id", "value": 2 }, { "key": "data", "value": "3_2" }],
          [{ "key": "id", "value": 3 }, { "key": "row_id", "value": 3 }, { "key": "data", "value": "3_3" }],
          [{ "key": "id", "value": 2 }, { "key": "row_id", "value": 1 }, { "key": "data", "value": "2_1" }],
          [{ "key": "id", "value": 1 }, { "key": "row_id", "value": 1 }, { "key": "data", "value": "1_1" }],
          [{ "key": "id", "value": 1 }, { "key": "row_id", "value": 2 }, { "key": "data", "value": "1_2" }]
        ]
      ]
    },
    {
      "name": "Order by ordinal, asterisk 2",
      "query": [
        "select *, row_id from data order by 2 desc"
      ],
      "expectedResultSets": [
        [
          [{ "key": "id", "value": 3 }, { "key": "row_id", "value": 3 }, { "key": "data", "value": "3_3" }, { "key": "row_id", "value": 3 }],
          [{ "key": "id", "value": 1 }, { "key": "row_id", "value": 2 }, { "key": "data", "value": "1_2" }, { "key": "row_id", "value": 2 }],
          [{ "key": "id", "value": 3 }, { "key": "row_id", "value": 2 }, { "key": "data", "value": "3_2" }, { "key": "row_id", "value": 2 }],
          [{ "key": "id", "value": 1 }, { "key": "row_id", "value": 1 }, { "key": "data", "value": "1_1" }, { "key": "row_id", "value": 1 }],
          [{ "key": "id", "value": 2 }, { "key": "row_id", "value": 1 }, { "key": "data", "value": "2_1" }, { "key": "row_id", "value": 1 }],
          [{ "key": "id", "value": 3 }, { "key": "row_id", "value": 1 }, { "key": "data", "value": "3_1" }, { "key": "row_id", "value": 1 }]
        ]
      ]
    },
    {
      "name": "Where",
      "query": [
        "select col1 from source where col2 >=4 order by col2 desc"
      ],
      "expectedResultSets": [
        [
          [{ "key": "col1", "value": 5 }],
          [{ "key": "col1", "value": 3 }]
        ]
      ]
    },
    {
      "name": "Top",
      "query": [
        "select top 1 * from source "
      ],
      "expectedResultSets": [
        [
          [{ "key": "col1", "value": 1 }, { "key": "col2", "value": 2 }]
        ]
      ]
    },
    {
      "name": "Top with order by",
      "query": [
        "select top 1 * from source order by col2 desc"
      ],
      "expectedResultSets": [
        [
          [{ "key": "col1", "value": 5 }, { "key": "col2", "value": 6 }]
        ]
      ]
    },
    {
      "name": "Group by",
      "query": [
        "select col1, col2 from source group by col1"
      ],
      "expectedResultSets": [
        [
          [{ "key": "col1", "value": 1 }, { "key": "col2", "value": [2] }],
          [{ "key": "col1", "value": 3 }, { "key": "col2", "value": [4] }],
          [{ "key": "col1", "value": 5 }, { "key": "col2", "value": [6] }]
        ]
      ]
    },
    {
      "name": "Group by with aggs",
      "query": [
        "select id, count(row_id) count, count(1) count1, count(case when id = 1 then null else 1 end) countExpr, sum(row_id) sum, data ",
        "from data ",
        "group by id ",
        "order by id "
      ],
      "expectedResultSets": [
        [
          [{ "key": "id", "value": 1 }, { "key": "count", "value": 2 }, { "key": "count1", "value": 2 }, { "key": "countExpr", "value": 0 }, { "key": "sum", "value": 3 }, { "key": "data", "value": ["1_1","1_2"] }],
          [{ "key": "id", "value": 2 }, { "key": "count", "value": 1 }, { "key": "count1", "value": 1 }, { "key": "countExpr", "value": 1 }, { "key": "sum", "value": 1 }, { "key": "data", "value": ["2_1"] }],
          [{ "key": "id", "value": 3 }, { "key": "count", "value": 3 }, { "key": "count1", "value": 3 }, { "key": "countExpr", "value": 3 }, { "key": "sum", "value": 6 }, { "key": "data", "value": ["3_1","3_2","3_3"] }]
        ]
      ]
    },
    {
      "name": "Double result sets",
      "query": [
        "select * from source ",
        "select * from source where col2 = 2"
      ],
      "expectedResultSets": [
        [
          [{ "key": "col1", "value": 1 }, { "key": "col2", "value": 2 }],
          [{ "key": "col1", "value": 3 }, { "key": "col2", "value": 4 }],
          [{ "key": "col1", "value": 5 }, { "key": "col2", "value": 6 }]
        ],
        [
          [{ "key": "col1", "value": 1 }, { "key": "col2", "value": 2 }]
        ]
      ]
    },
    {
      "name": "LIKE",
      "query": [
        "select * from strings where string1 like '%ll%'",
        "select id from strings where string1 like 's_me%'"
      ],
      "expectedResultSets": [
        [
          [{ "key": "id", "value": 2 }, { "key": "string1", "value": "hello world" }, { "key": "string2", "value": "asd" }]
        ],
        [
          [{ "key": "id", "value": 1 }],
          [{ "key": "id", "value": 4 }]
        ]
        
      ]
    },
    {
      "name": "Assignment select",
      "query": [
        "set @var3 = 0 ",
        "select @var1 = 10 + 20 ",
        "select @var2 = col1 + col2, @var3 = @var3 + 1 from source ",
        "select @var1 Var1, @var2 Var2, @var3 Var3"
      ],
      "expectedResultSets": [
        [
          [{ "key": "Var1", "value": 30 }, { "key": "Var2", "value": 11 }, { "key": "Var3", "value": 3 }]
        ]
      ]
    },
    {
      "name": "Assignment select group by",
      "query": [
        "select @var = min(col1) from source group by 'dummy'",
        "select @var"
      ],
      "expectedResultSets": [
        [
          [{ "key": "var", "value": 1 }]
        ]
      ]
    },
    {
      "name": "Assignment select group by with multiple groups",
      "query": [
        "select @var = 0 ",
        "select @var = min(@var + length(string1)) from strings group by id ",
        "select @var"
      ],
      "expectedResultSets": [
        [
          [{ "key": "var", "value": 48 }]
        ]
      ]
    },
    {
      "name": "Calculated value",
      "query": [
        "select id + row_id calc ",
        "from data "
      ],
      "expectedResultSets": [
        [
          [{ "key": "calc", "value": 2 }],
          [{ "key": "calc", "value": 3 }],
          [{ "key": "calc", "value": 3 }],
          [{ "key": "calc", "value": 4 }],
          [{ "key": "calc", "value": 5 }],
          [{ "key": "calc", "value": 6 }]
        ]
      ]
    },
    {
      "name": "Calculated value in sub query",
      "query": [
        "select calc ",
        "from ",
        "( ",
        "  select `value: ${id + row_id}` calc ",
        "  from data ",
        ") x"
      ],
      "expectedResultSets": [
        [
          [{ "key": "calc", "value": "value: 2" }],
          [{ "key": "calc", "value": "value: 3" }],
          [{ "key": "calc", "value": "value: 3" }],
          [{ "key": "calc", "value": "value: 4" }],
          [{ "key": "calc", "value": "value: 5" }],
          [{ "key": "calc", "value": "value: 6" }]
        ]
      ]
    },
    {
      "name": "Calculated value in sub query with join",
      "query": [
        "select id, col2, calc, x.data ",
        "from ",
        "( ",
        "  select d.id, s.col2, d.id + s.col2 calc, d.data ",
        "  from data d ",
        "  inner join source s ",
        "    on s.col1 = d.row_id ",
        ") x"
      ],
      "expectedResultSets": [
        [
          [{ "key": "id", "value": 1 },{ "key": "col2", "value": 2 },{ "key": "calc", "value": 3 },{ "key": "data", "value": "1_1" }],
          [{ "key": "id", "value": 2 },{ "key": "col2", "value": 2 },{ "key": "calc", "value": 4 },{ "key": "data", "value": "2_1" }],
          [{ "key": "id", "value": 3 },{ "key": "col2", "value": 2 },{ "key": "calc", "value": 5 },{ "key": "data", "value": "3_1" }],
          [{ "key": "id", "value": 3 },{ "key": "col2", "value": 4 },{ "key": "calc", "value": 7 },{ "key": "data", "value": "3_3" }]
        ]
      ]
    },
    {
      "name": "Join on a calculated column",
      "description": [
        "Make sure that the calculated column inside subquery in used in the join predicate"
      ],
      "query": [
        "--set @@debugplan = true ",
        "select *",
        "from source s",
        "inner join ",
        "( ",
        "  select id + row_id id, d.data",
        "  from data d ",
        ") x ",
        "  on x.id = s.col1 "
      ],
      "expectedResultSets": [
        [
          [{ "key": "col1", "value": 3 },{ "key": "col2", "value": 4 },{ "key": "id", "value": 3 },{ "key": "data", "value": "1_2" }],
          [{ "key": "col1", "value": 3 },{ "key": "col2", "value": 4 },{ "key": "id", "value": 3 },{ "key": "data", "value": "2_1" }],
          [{ "key": "col1", "value": 5 },{ "key": "col2", "value": 6 },{ "key": "id", "value": 5 },{ "key": "data", "value": "3_2" }]
        ]
      ]
    },
    {
      "name": "Reference to non-existing fields in subquery",
      "query": [
        "select col ",
        "from ",
        "( ",
        "  select id ",
        "  from data d ",
        ") x"
      ],
      "expectedException": "se.kuseman.payloadbuilder.core.parser.ParseException",
      "expectedMessageContains": "col cannot be bound"
    },
    {
      "name": "Selects without table source",
      "query": [
        "select 1",
        "select 2 where false",
        "select 3 order by concat('val', 1)",
        "select top 10 4"
      ],
      "expectedResultSets": [
        [
          [{"key":"1","value": 1}]
        ],
        [
        ],
        [
          [{"key":"3","value": 3}]
        ],
        [
          [{"key":"4","value": 4}]
        ]
      ]
    },
    {
      "name": "Selects with for output",
      "query": [
        "--set @@printplan = true",
        "select (select 1 col1, 2 col2 for object), ",
        "       (select 1, 2 for array), ",
        "       (select 1 col1, 2 col2 for object_array), ",
        "       (select (select 1, 2 for array), (select 3, 4 for array) for array),",
        "       (select (select 1, 2 for array) ar1, (select 3, 4 for array) ar2 for object), ",
        "       (select 1 col1, 2 col2 for object).col1 deref_obj "
      ],
      "expectedResultSets": [
        [
          [{"key":"__expr0","value": {"col1": 1, "col2": 2}},{"key":"__expr1","value": [1,2]},{"key":"__expr2","value": [{"col1": 1, "col2": 2}]},{"key":"__expr3","value": [[1,2],[3,4]]},{"key":"__expr6","value": {"ar1":[1,2],"ar2":[3,4]}},{ "key": "deref_obj", "value": 1 }]
        ]
      ]
    },
    {
      "name": "Selects with for output with table source",
      "query": [
        "select (select d.data row_id, s.col1, s.col2 from source s for object_array) obj ",
        "from data d ",
        "where id = 1"
      ],
      "expectedResultSets": [
        [
          [{"key":"obj","value": [{"row_id": "1_1","col1": 1,"col2": 2},{"row_id":"1_1","col1": 3,"col2": 4},{"row_id":"1_1","col1": 5, "col2": 6}]}],
          [{"key":"obj","value": [{"row_id": "1_2","col1": 1,"col2": 2},{"row_id":"1_2","col1": 3,"col2": 4},{"row_id":"1_2","col1": 5, "col2": 6}]}]
        ]
      ]
    },
    {
      "name": "Selects with for output and subscript ",
      "query": [
        "--set @@printplan = true ",
        "select d[0].data ",
        ", ( select st[0].id, d.row_id, d.data, s.col2 from (d) d for object_array ) obj",
        "from source s ",
        "inner populate join data d ",
        "  on d.id = s.col1 ",
        "inner populate join strings st ",
        "  on st.id = s.col1 ",
        "order by 1"
      ],
      "expectedResultSets": [
        [
          [{"key":"data","value": "1_1"}, {"key": "obj", "value": [ { "id": 1, "row_id": 1, "data": "1_1", "col2": 2 }, { "id": 1, "row_id": 2, "data": "1_2", "col2": 2 } ]}],
          [{"key":"data","value": "3_1"}, {"key": "obj", "value": [ { "id": 3, "row_id": 1, "data": "3_1", "col2": 4 }, { "id": 3, "row_id": 2, "data": "3_2", "col2": 4 }, { "id": 3, "row_id": 3, "data": "3_3", "col2": 4 } ]}]
        ]
      ]
    },
    {
      "name": "Selects with for output and case ",
      "query": [
        "--set @@debugplan = true ",
        "select ",
        " case when d.row_id = 1 then (select id, data for object_array)  else null end obj",
        "from data d ",
        "where d.id = 1"  
      ],
      "expectedResultSets": [
        [
          [{"key": "obj", "value": [ { "id": 1, "data": "1_1" } ] } ],
          [{"key": "obj", "value": null } ]
        ]
      ]
    },
    {
      "name": "Selects with for output with no rows ",
      "query": [
        "--set @@debugplan = true ",
        "select (select 'hello' col where false for object) no_empty, ",
        "       isnull((select 'hello' col where false for object), object()) empty_object, ",
        "       isnull((select 'hello' col where false for object), array()) empty_array "
      ],
      "expectedResultSets": [
        [
          [{"key": "no_empty", "value": null }, {"key": "empty_object", "value": {}},{"key": "empty_array", "value": []}]
        ]
      ]
    },
    {
      "name": "Selects with for output and qualified asterisk projection",
      "query": [
        "select ",
        " (select d.* for object_array) obj",
        "from source s ",
        "inner populate join data d ",
        "  on d.id = s.col1 ",
        "order by s.col1"
      ],
      "expectedResultSets": [
        [
          [{"key": "obj", "value": [ { "id": [1, 1],    "row_id": [ 1, 2    ], "data": [ "1_1", "1_2"        ] } ] } ],
          [{"key": "obj", "value": [ { "id": [3, 3, 3], "row_id": [ 1, 2, 3 ], "data": [ "3_1", "3_2", "3_3" ] } ] } ]
        ]
      ]
    },
    {
      "name": "Selects with for output and qualified asterisk projection missing alias",
      "query": [
        "select ",
        " (select c.* for object_array) obj",
        "from source s ",
        "inner populate join data d ",   
        "  on d.id = s.col1 "  
      ],
      "expectedException": "se.kuseman.payloadbuilder.core.parser.ParseException",
      "expectedMessageContains": "Alias c could not be bound"
    },
    {
      "name": "Selects with for output and asterisk projection",
      "query": [
        "select ",
        " (select * for object_array) obj",
        "from source s ",
        "inner populate join data d ",   
        "  on d.id = s.col1 "  
      ],
      "expectedException": "se.kuseman.payloadbuilder.core.parser.ParseException",
      "expectedMessageContains": "Must specify table source"
    },
    {
      "name": "Selects with for output and asterisk projection with expression scan",
      "query": [
        "select ",
        " (select * from (d) d for object_array) obj",
        "from source s ",
        "inner populate join data d ",
        "  on d.id = s.col1 ",
        "order by s.col1"
      ],
      "expectedResultSets": [
        [
          [{"key": "obj", "value": [ { "id": 1, "row_id": 1, "data": "1_1" }, { "id": 1, "row_id": 2, "data": "1_2" } ] } ],
          [{"key": "obj", "value": [ { "id": 3, "row_id": 1, "data": "3_1" }, { "id": 3, "row_id": 2, "data": "3_2" }, { "id": 3, "row_id": 3, "data": "3_3" } ] } ]
        ]
      ]
    },
    {
      "name": "Selects with for output and qualified asterisk projection with expression scan",
      "query": [
        "--set @@debugplan = true ",
        "select ",
        " (select d.* from (d) d for object_array) obj",
        "from source s ",
        "inner populate join data d ",
        "  on d.id = s.col1 ",
        "order by s.col1"
      ],
      "expectedResultSets": [
        [
          [{"key": "obj", "value": [ { "id": 1, "row_id": 1, "data": "1_1" }, { "id": 1, "row_id": 2, "data": "1_2" } ] } ],
          [{"key": "obj", "value": [ { "id": 3, "row_id": 1, "data": "3_1" }, { "id": 3, "row_id": 2, "data": "3_2" }, { "id": 3, "row_id": 3, "data": "3_3" } ] } ]
        ]
      ]
    },
    {
      "name": "Selects with for output and qualified asterisk projection with expression scan clause missing alias",
      "query": [
        "select ",
        " (select c.* from (d) d for object_array) obj",
        "from source s ",
        "inner populate join data d ",   
        "  on d.id = s.col1 "  
      ],
      "expectedException": "se.kuseman.payloadbuilder.core.parser.ParseException",
      "expectedMessageContains": "Alias c could not be bound"
    },
    {
      "name": "System catalog ",
      "query": [
        "set @var = 'test' ",
        "select * from sys#catalogs ",
        "select * from sys#variables ",
        "show variables",
        "select * from sys#c.tables ",
        "show c#tables",
        "select * from sys#c.columns ",
        "select * from sys#c.functions ",
        "select * from sys#c.indices ",
        "show c#functions ", 
        "show functions"
      ],
      "expectedResultSets": [
        [
          [{"key":"alias","value": "c"},              {"key":"name", "value": "Test#c"}],
          [{"key":"alias","value": "d"},              {"key":"name", "value": "Test#d"}],
          [{"key":"alias","value": "complexcolumns"}, {"key":"name", "value": "Test#complexColumns"}],
          [{"key":"alias","value": "ecom"},           {"key":"name", "value": "Test#ecom"}]
        ],
        [
          [{"key":"name","value": "var"}, {"key":"value", "value": "test"}]
        ],
        [
          [{"key":"name","value": "var"}, {"key":"value", "value": "test"}]
        ],
        [
          [{"key":"name","value": "source"},     {"key":"columns","value": ["col1", "col2"]}],
          [{"key":"name","value": "source2"},    {"key":"columns","value": ["col1", "col2"]}],
          [{"key":"name","value": "data"},       {"key":"columns","value": ["id", "row_id", "data"]}],
          [{"key":"name","value": "data2"},      {"key":"columns","value": ["id", "value"]}],
          [{"key":"name","value": "strings"},    {"key":"columns","value": ["id", "string1", "string2"]}],
          [{"key":"name","value": "agg_data"},   {"key":"columns","value": ["id", "value"]}],
          [{"key":"name","value": "map_values"}, {"key":"columns","value": ["id", "value"]}]
        ],
        [
          [{"key":"name","value": "source"},   {"key":"columns","value": ["col1", "col2"]}],
          [{"key":"name","value": "source2"},  {"key":"columns","value": ["col1", "col2"]}],
          [{"key":"name","value": "data"},     {"key":"columns","value": ["id", "row_id", "data"]}],
          [{"key":"name","value": "data2"},    {"key":"columns","value": ["id", "value"]}],
          [{"key":"name","value": "strings"},  {"key":"columns","value": ["id", "string1", "string2"]}],
          [{"key":"name","value": "agg_data"}, {"key":"columns","value": ["id", "value"]}],
          [{"key":"name","value": "map_values"}, {"key":"columns","value": ["id", "value"]}]
        ],
        [
          [{"key":"table","value": "source"},     {"key":"name","value": "col1"},    {"key":"custom","value": 4}],
          [{"key":"table","value": "source"},     {"key":"name","value": "col2"},    {"key":"custom","value": 4}],
          [{"key":"table","value": "source2"},    {"key":"name","value": "col1"},    {"key":"custom","value": 4}],
          [{"key":"table","value": "source2"},    {"key":"name","value": "col2"},    {"key":"custom","value": 4}],
          [{"key":"table","value": "data"},       {"key":"name","value": "id"},      {"key":"custom","value": 2}],
          [{"key":"table","value": "data"},       {"key":"name","value": "row_id"},  {"key":"custom","value": 6}],
          [{"key":"table","value": "data"},       {"key":"name","value": "data"},    {"key":"custom","value": 4}],
          [{"key":"table","value": "data2"},      {"key":"name","value": "id"},      {"key":"custom","value": 2}],
          [{"key":"table","value": "data2"},      {"key":"name","value": "value"},   {"key":"custom","value": 5}],
          [{"key":"table","value": "strings"},    {"key":"name","value": "id"},      {"key":"custom","value": 2}],
          [{"key":"table","value": "strings"},    {"key":"name","value": "string1"}, {"key":"custom","value": 7}],
          [{"key":"table","value": "strings"},    {"key":"name","value": "string2"}, {"key":"custom","value": 7}],
          [{"key":"table","value": "agg_data"},   {"key":"name","value": "id"},      {"key":"custom","value": 2}],
          [{"key":"table","value": "agg_data"},   {"key":"name","value": "value"},   {"key":"custom","value": 5}],
          [{"key":"table","value": "map_values"}, {"key":"name","value": "id"},      {"key":"custom","value": 2}],
          [{"key":"table","value": "map_values"}, {"key":"name","value": "value"},   {"key":"custom","value": 5}]
        ],
        [
          [{"key":"name","value": "testFunc"},{"key":"type","value": "SCALAR"}, {"key":"description","value": ""}],
          [{"key":"name","value": "testTVFOptions"},{"key":"type","value": "TABLE"}, {"key":"description","value": ""}]
        ],
        [],
        [
          [{"key":"name","value": "testFunc"},{"key":"type","value": "SCALAR"}, {"key":"description","value": ""}],
          [{"key":"name","value": "testTVFOptions"},{"key":"type","value": "TABLE"}, {"key":"description","value": ""}]
        ],
        [
          [{"key":"name","value": "testFunc"},            {"key":"type","value": "SCALAR"},           {"key":"description","value": "###IGNORE###"}],
          [{"key":"name","value": "testTVFOptions"},      {"key":"type","value": "TABLE"},            {"key":"description","value": "###IGNORE###"}],
          [{"key":"name","value": "System functions"},    {"key":"type","value": ""},                 {"key":"description","value": "###IGNORE###"}],
          [{"key":"name","value": "object_array"},        {"key":"type","value": "AGGREGATE"},        {"key":"description","value": "###IGNORE###"}],
          [{"key":"name","value": "array"},               {"key":"type","value": "OPERATOR"},         {"key":"description","value": "###IGNORE###"}],
          [{"key":"name","value": "object"},              {"key":"type","value": "OPERATOR"},         {"key":"description","value": "###IGNORE###"}],
          [{"key":"name","value": "object_array"},        {"key":"type","value": "OPERATOR"},         {"key":"description","value": "###IGNORE###"}],
          [{"key":"name","value": "abs"},                 {"key":"type","value": "SCALAR"},           {"key":"description","value": "###IGNORE###"}],
          [{"key":"name","value": "all"},                 {"key":"type","value": "SCALAR"},           {"key":"description","value": "###IGNORE###"}],
          [{"key":"name","value": "any"},                 {"key":"type","value": "SCALAR"},           {"key":"description","value": "###IGNORE###"}],
          [{"key":"name","value": "base64_decode"},       {"key":"type","value": "SCALAR"},           {"key":"description","value": "###IGNORE###"}],
          [{"key":"name","value": "base64_encode"},       {"key":"type","value": "SCALAR"},           {"key":"description","value": "###IGNORE###"}],
          [{"key":"name","value": "ceiling"},             {"key":"type","value": "SCALAR"},           {"key":"description","value": "###IGNORE###"}],
          [{"key":"name","value": "char"},                {"key":"type","value": "SCALAR"},           {"key":"description","value": "###IGNORE###"}],
          [{"key":"name","value": "charindex"},           {"key":"type","value": "SCALAR"},           {"key":"description","value": "###IGNORE###"}],
          [{"key":"name","value": "coalesce"},            {"key":"type","value": "SCALAR"},           {"key":"description","value": "###IGNORE###"}],
          [{"key":"name","value": "concat"},              {"key":"type","value": "SCALAR"},           {"key":"description","value": "###IGNORE###"}],
          [{"key":"name","value": "contains"},            {"key":"type","value": "SCALAR"},           {"key":"description","value": "###IGNORE###"}],
          [{"key":"name","value": "current_timezone"},    {"key":"type","value": "SCALAR"},           {"key":"description","value": "###IGNORE###"}],
          [{"key":"name","value": "distinct"},            {"key":"type","value": "SCALAR"},           {"key":"description","value": "###IGNORE###"}],
          [{"key":"name","value": "filter"},              {"key":"type","value": "SCALAR"},           {"key":"description","value": "###IGNORE###"}],
          [{"key":"name","value": "flatmap"},             {"key":"type","value": "SCALAR"},           {"key":"description","value": "###IGNORE###"}],
          [{"key":"name","value": "floor"},               {"key":"type","value": "SCALAR"},           {"key":"description","value": "###IGNORE###"}],
          [{"key":"name","value": "format"},              {"key":"type","value": "SCALAR"},           {"key":"description","value": "###IGNORE###"}],
          [{"key":"name","value": "getdate"},             {"key":"type","value": "SCALAR"},           {"key":"description","value": "###IGNORE###"}],
          [{"key":"name","value": "getutcdate"},          {"key":"type","value": "SCALAR"},           {"key":"description","value": "###IGNORE###"}],
          [{"key":"name","value": "greatest"},            {"key":"type","value": "SCALAR"},           {"key":"description","value": "###IGNORE###"}],
          [{"key":"name","value": "hash"},                {"key":"type","value": "SCALAR"},           {"key":"description","value": "###IGNORE###"}],
          [{"key":"name","value": "isblank"},             {"key":"type","value": "SCALAR"},           {"key":"description","value": "###IGNORE###"}],
          [{"key":"name","value": "isjson"},              {"key":"type","value": "SCALAR"},           {"key":"description","value": "###IGNORE###"}],
          [{"key":"name","value": "isjsonarray"},         {"key":"type","value": "SCALAR"},           {"key":"description","value": "###IGNORE###"}],
          [{"key":"name","value": "isjsonobject"},        {"key":"type","value": "SCALAR"},           {"key":"description","value": "###IGNORE###"}],
          [{"key":"name","value": "isnull"},              {"key":"type","value": "SCALAR"},           {"key":"description","value": "###IGNORE###"}],
          [{"key":"name","value": "json_value"},          {"key":"type","value": "SCALAR"},           {"key":"description","value": "###IGNORE###"}],
          [{"key":"name","value": "least"},               {"key":"type","value": "SCALAR"},           {"key":"description","value": "###IGNORE###"}],
          [{"key":"name","value": "left"},                {"key":"type","value": "SCALAR"},           {"key":"description","value": "###IGNORE###"}],
          [{"key":"name","value": "length"},              {"key":"type","value": "SCALAR"},           {"key":"description","value": "###IGNORE###"}],
          [{"key":"name","value": "lower"},               {"key":"type","value": "SCALAR"},           {"key":"description","value": "###IGNORE###"}],
          [{"key":"name","value": "lpad"},                {"key":"type","value": "SCALAR"},           {"key":"description","value": "###IGNORE###"}],
          [{"key":"name","value": "ltrim"},               {"key":"type","value": "SCALAR"},           {"key":"description","value": "###IGNORE###"}],
          [{"key":"name","value": "map"},                 {"key":"type","value": "SCALAR"},           {"key":"description","value": "###IGNORE###"}],
          [{"key":"name","value": "none"},                {"key":"type","value": "SCALAR"},           {"key":"description","value": "###IGNORE###"}],
          [{"key":"name","value": "parsedatasize"},       {"key":"type","value": "SCALAR"},           {"key":"description","value": "###IGNORE###"}],
          [{"key":"name","value": "parseduration"},       {"key":"type","value": "SCALAR"},           {"key":"description","value": "###IGNORE###"}],
          [{"key":"name","value": "randomInt"},           {"key":"type","value": "SCALAR"},           {"key":"description","value": "###IGNORE###"}],
          [{"key":"name","value": "regexp_like"},         {"key":"type","value": "SCALAR"},           {"key":"description","value": "###IGNORE###"}],
          [{"key":"name","value": "regexp_match"},        {"key":"type","value": "SCALAR"},           {"key":"description","value": "###IGNORE###"}],
          [{"key":"name","value": "replace"},             {"key":"type","value": "SCALAR"},           {"key":"description","value": "###IGNORE###"}],
          [{"key":"name","value": "reverse"},             {"key":"type","value": "SCALAR"},           {"key":"description","value": "###IGNORE###"}],
          [{"key":"name","value": "right"},               {"key":"type","value": "SCALAR"},           {"key":"description","value": "###IGNORE###"}],
          [{"key":"name","value": "rpad"},                {"key":"type","value": "SCALAR"},           {"key":"description","value": "###IGNORE###"}],
          [{"key":"name","value": "rtrim"},               {"key":"type","value": "SCALAR"},           {"key":"description","value": "###IGNORE###"}],
          [{"key":"name","value": "string_split"},        {"key":"type","value": "SCALAR"},           {"key":"description","value": "###IGNORE###"}],
          [{"key":"name","value": "substring"},           {"key":"type","value": "SCALAR"},           {"key":"description","value": "###IGNORE###"}],
          [{"key":"name","value": "toarray"},             {"key":"type","value": "SCALAR"},           {"key":"description","value": "###IGNORE###"}],
          [{"key":"name","value": "totable"},             {"key":"type","value": "SCALAR"},           {"key":"description","value": "###IGNORE###"}],
          [{"key":"name","value": "trim"},                {"key":"type","value": "SCALAR"},           {"key":"description","value": "###IGNORE###"}],
          [{"key":"name","value": "typeof"},              {"key":"type","value": "SCALAR"},           {"key":"description","value": "###IGNORE###"}],
          [{"key":"name","value": "unix_timestamp"},      {"key":"type","value": "SCALAR"},           {"key":"description","value": "###IGNORE###"}],
          [{"key":"name","value": "upper"},               {"key":"type","value": "SCALAR"},           {"key":"description","value": "###IGNORE###"}],
          [{"key":"name","value": "array"},               {"key":"type","value": "SCALAR_AGGREGATE"}, {"key":"description","value": "###IGNORE###"}],
          [{"key":"name","value": "avg"},                 {"key":"type","value": "SCALAR_AGGREGATE"}, {"key":"description","value": "###IGNORE###"}],
          [{"key":"name","value": "count"},               {"key":"type","value": "SCALAR_AGGREGATE"}, {"key":"description","value": "###IGNORE###"}],
          [{"key":"name","value": "max"},                 {"key":"type","value": "SCALAR_AGGREGATE"}, {"key":"description","value": "###IGNORE###"}],
          [{"key":"name","value": "min"},                 {"key":"type","value": "SCALAR_AGGREGATE"}, {"key":"description","value": "###IGNORE###"}],
          [{"key":"name","value": "object"},              {"key":"type","value": "SCALAR_AGGREGATE"}, {"key":"description","value": "###IGNORE###"}],
          [{"key":"name","value": "string_agg"},          {"key":"type","value": "SCALAR_AGGREGATE"}, {"key":"description","value": "###IGNORE###"}],
          [{"key":"name","value": "sum"},                 {"key":"type","value": "SCALAR_AGGREGATE"}, {"key":"description","value": "###IGNORE###"}],
          [{"key":"name","value": "opencsv"},             {"key":"type","value": "TABLE"},            {"key":"description","value": "###IGNORE###"}],
          [{"key":"name","value": "openjson"},            {"key":"type","value": "TABLE"},            {"key":"description","value": "###IGNORE###"}],
          [{"key":"name","value": "openxml"},             {"key":"type","value": "TABLE"},            {"key":"description","value": "###IGNORE###"}],
          [{"key":"name","value": "range"},               {"key":"type","value": "TABLE"},            {"key":"description","value": "###IGNORE###"}],
          [{"key":"name","value": "string_split"},        {"key":"type","value": "TABLE"},            {"key":"description","value": "###IGNORE###"}]
        ]
      ]
    },
    {
      "name": "Switch default catalog between two queries ",
      "query": [
        "select * from source ",
        "use d ",
        "select * from source "
      ],
      "expectedResultSets": [
        [
          [{"key":"col1","value": 1}, {"key":"col2", "value": 2}],
          [{"key":"col1","value": 3}, {"key":"col2", "value": 4}],
          [{"key":"col1","value": 5}, {"key":"col2", "value": 6}]
        ],
        [
          [{"key":"col1","value": 10}, {"key":"col2", "value": 20}],
          [{"key":"col1","value": 30}, {"key":"col2", "value": 40}],
          [{"key":"col1","value": 50}, {"key":"col2", "value": 60}]
        ]
      ]
    },
    {
      "name": "Variable as table source",
      "query": [
        "set @tbl = totable(json_value('[ { \"key\": 123 }, { \"key\": 456 } ]')) ",
        "select * ",
        "from @tbl "
      ],
      "expectedResultSets": [
        [
          [{"key":"key","value": 123}],
          [{"key":"key","value": 456}]
        ]
      ]
    },
    {
      "name": "Variable as table source invalid type",
      "query": [
        "set @tbl = 123 ",
        "select * ",
        "from @tbl "
      ],
      "expectedException": "se.kuseman.payloadbuilder.core.parser.ParseException",
      "expectedMessageContains": "Table variable expression must be of type: Table but got: Int"
    },
    {
      "name": "Test table option expressions get resolved",
      "query": [
        "select * ",
        "from range(1,3) x ",
        "cross apply c#testTVFOptions() y with ( ",
        "  input = x.value * 2 ",
        ") "
      ],
      "expectedResultSets": [
        [
          [{"key":"Value","value": 1}, {"key":"input","value": 2}],
          [{"key":"Value","value": 2}, {"key":"input","value": 4}]
        ]
      ]
    },
    {
      "name": "Test table option expression scope",
      "query": [
        "select * ",
        "from range(1,3) x ",
        "inner join source y with ( ",
        "  input = x.value * 2 ",
        ") ",
        " on y.col = x.col"
      ],
      "expectedException": "se.kuseman.payloadbuilder.core.parser.ParseException",
      "expectedMessageContains": "x.value cannot be bound"
    },
    {
      "name": "OpenCsv",
      "query": [
        "select * ",
        "from opencsv('col1,col2,col3",
        "1,hello world,3",
        "4,hello world 2,6",
        "') x "
      ],
      "expectedResultSets": [
        [
          [{"key":"col1","value": "1"}, {"key":"col2","value": "hello world"}, {"key":"col3","value": "3"}],
          [{"key":"col1","value": "4"}, {"key":"col2","value": "hello world 2"}, {"key":"col3","value": "6"}]
        ]
      ]
    },
    {
      "name": "OpenCsv with custom separator",
      "query": [
        "select * ",
        "from opencsv('col1;col2;col3",
        "1;hello world;3",
        "4;\"hello ;world 2\";6",
        "') x with (columnseparator = ';') "
      ],
      "expectedResultSets": [
        [
          [{"key":"col1","value": "1"}, {"key":"col2","value": "hello world"}, {"key":"col3","value": "3"}],
          [{"key":"col1","value": "4"}, {"key":"col2","value": "hello ;world 2"}, {"key":"col3","value": "6"}]
        ]
      ]
    },
    {
      "name": "OpenJson",
      "query": [
        "select * ",
        "from openjson('[{\"col1\":\"1\",\"col2\":\"hello world\",\"col3\":3},{\"col1\":\"4\",\"col2\":\"hello \\\" world 2\",\"col3\":6}]') x"
      ],
      "expectedResultSets": [
        [
          [{"key":"col1","value": "1"}, {"key":"col2","value": "hello world"}, {"key":"col3","value": 3}],
          [{"key":"col1","value": "4"}, {"key":"col2","value": "hello \" world 2"}, {"key":"col3","value": 6}]
        ]
      ]
    },
    {
      "name": "Access column which is present multiple times from the same column reference",
      "description": "A regression that made it impossible to order by a column that was also present multiple times in projection",
      "query": [
        "select s.col1, s.* ",
        "from source s ",
        "order by s.col1 "
      ],
      "expectedResultSets": [
        [
          [{"key":"col1","value": 1}, {"key":"col1","value": 1}, {"key":"col2","value": 2 } ],
          [{"key":"col1","value": 3}, {"key":"col1","value": 3}, {"key":"col2","value": 4 } ],
          [{"key":"col1","value": 5}, {"key":"col1","value": 5}, {"key":"col2","value": 6 } ]
        ]
      ]
    },
    {
      "name": "Access column which is present multiple times from different column references",
      "query": [
        "select s2.*, s.*, s.col2 ",
        "from source s ",
        "inner join source2 s2 ",
        "  on s2.col1 = s.col1 ",
        "order by s.col2 "
      ],
      "expectedResultSets": [
        [
          [{"key":"col1","value": 1}, {"key":"col2","value": 2 }, {"key":"col1","value": 1}, {"key":"col2","value": 2 }, {"key":"col2","value": 2 } ],
          [{"key":"col1","value": 1}, {"key":"col2","value": 2 }, {"key":"col1","value": 1}, {"key":"col2","value": 2 }, {"key":"col2","value": 2 } ],
          [{"key":"col1","value": 5}, {"key":"col2","value": 6 }, {"key":"col1","value": 5}, {"key":"col2","value": 6 }, {"key":"col2","value": 6 } ],
          [{"key":"col1","value": 5}, {"key":"col2","value": 6 }, {"key":"col1","value": 5}, {"key":"col2","value": 6 }, {"key":"col2","value": 6 } ]
        ]
      ]
    },
    {
      "name": "Fail when accessing a column that is present multiple times with different or none column references",
      "query": [
        "select s.* ",
        "from source s ",
        "inner join source2 s2 ",
        "  on s2.col1 = s.col1 ",
        "order by col1 "
      ],
      "expectedException": "se.kuseman.payloadbuilder.core.parser.ParseException",
      "expectedMessageContains": "Ambiguous column: col1"
    },
    {
      "name": "Verify that subquery expression with operator function with no correlation don't break main query logic",
      "query": [
        "--set @@printplan = true ",
        "--set @@debugplan = true ",
        "select ( select * from source where false for object_array) value from source2 where col1 = 100"
      ],
      "expectedResultSets": [
        []
      ]
    },
    {
      "name": "Verify that a pushed down subquery isn't included in asterisks",
      "query": [
        "select *, (select * from source for object_array) from data"
      ],
      "expectedResultSets": [
        [
          [{"key":"id","value": 1}, {"key":"row_id","value": 1 }, {"key":"data","value": "1_1"}, {"key":"__expr0","value": [ {"col1": 1, "col2": 2}, {"col1": 3, "col2": 4}, {"col1": 5, "col2": 6} ] } ],
          [{"key":"id","value": 1}, {"key":"row_id","value": 2 }, {"key":"data","value": "1_2"}, {"key":"__expr0","value": [ {"col1": 1, "col2": 2}, {"col1": 3, "col2": 4}, {"col1": 5, "col2": 6} ] } ],
          [{"key":"id","value": 2}, {"key":"row_id","value": 1 }, {"key":"data","value": "2_1"}, {"key":"__expr0","value": [ {"col1": 1, "col2": 2}, {"col1": 3, "col2": 4}, {"col1": 5, "col2": 6} ] } ],
          [{"key":"id","value": 3}, {"key":"row_id","value": 1 }, {"key":"data","value": "3_1"}, {"key":"__expr0","value": [ {"col1": 1, "col2": 2}, {"col1": 3, "col2": 4}, {"col1": 5, "col2": 6} ] } ],
          [{"key":"id","value": 3}, {"key":"row_id","value": 2 }, {"key":"data","value": "3_2"}, {"key":"__expr0","value": [ {"col1": 1, "col2": 2}, {"col1": 3, "col2": 4}, {"col1": 5, "col2": 6} ] } ],
          [{"key":"id","value": 3}, {"key":"row_id","value": 3 }, {"key":"data","value": "3_3"}, {"key":"__expr0","value": [ {"col1": 1, "col2": 2}, {"col1": 3, "col2": 4}, {"col1": 5, "col2": 6} ] } ]
        ]
      ]
    },
    {
      "name": "Verify that we can join on outer references",
      "query": [
        "--set @@debugplan = true ",
        "select ( ",
        "  select s.col2, s2.col2, d.id, d.data ",
        "  from source2 s2 ",
        "  inner join data d ",
        "    on d.id = s.col2 ",
        "  where s2.col2 = s.col2 ",
        "  for object_array ",
        ") \"values\"",
        "from source s"
      ],
      "expectedResultSets": [
        [
          [{"key":"values","value": [{"col2":2, "id": 2, "data": "2_1"}, {"col2": 2, "id": 2, "data": "2_1"}]}],
          [{"key":"values","value": null }],
          [{"key":"values","value": null }]
        ]
      ]
    },
    {
      "name": "Inner join with expression scan",
      "query": [
        "--set @@debugplan = true ",
        "use complexColumns ",
        "select t.id, tt.* ",
        "from \"table\" t ",
        "inner join (toTable(json_value(t.\"table\"))) tt ",
        "  on tt.key = 123 "
      ],
      "expectedResultSets": [
        [
          [{"key":"id","value": 1}, {"key": "key", "value": 123}, {"key": "value", "value": 456}]
        ]
      ]
    },
    {
      "name": "Inner populate join with expression scan",
      "query": [
        "--set @@debugplan = true ",
        "use complexColumns ",
        "select t.id, tt ",
        "from \"table\" t ",
        "inner populate join (toTable(json_value(t.\"table\"))) tt ",
        "  on tt.key = 123 "
      ],
      "expectedResultSets": [
        [
          [{"key":"id","value": 1}, { "key": "tt", "value": [{"key": 123, "value": 456}]}]
        ]
      ]
    },
    {
      "name": "Inner populate join with expression scan no matches",
      "query": [
        "--set @@debugplan = true ",
        "use complexColumns ",
        "select t.id, tt ",
        "from \"table\" t ",
        "inner populate join (toTable(json_value(t.\"table\"))) tt ",
        "  on tt.key = 1230 "
      ],
      "expectedResultSets": [
        [
        ]
      ]
    },    {
      "name": "Left join with expression scan",
      "query": [
        "--set @@debugplan = true ",
        "use complexColumns ",
        "select t.id, tt.* ",
        "from \"table\" t ",
        "left join (toTable(json_value(t.\"table\"))) tt ",
        "  on tt.key = 123 "
      ],
      "expectedResultSets": [
        [
          [{"key":"id","value": 1}, {"key": "key", "value": 123}, {"key": "value", "value": 456}],
          [{"key":"id","value": 2}, {"key": "key", "value": null}, {"key": "value", "value": null}]
        ]
      ]
    },
    {
      "name": "Left populate join with expression scan",
      "query": [
        "--set @@debugplan = true ",
        "use complexColumns ",
        "select t.id, tt ",
        "from \"table\" t ",
        "left populate join (toTable(json_value(t.\"table\"))) tt ",
        "  on tt.key = 123 "
      ],
      "expectedResultSets": [
        [
          [{"key":"id","value": 1}, { "key": "tt", "value": [{"key": 123, "value": 456}]}],
          [{"key":"id","value": 2}, {"key": "tt", "value": null}]
        ]
      ]
    },
    {
      "name": "Left populate join with expression scan no matches",
      "query": [
        "--set @@debugplan = true ",
        "use complexColumns ",
        "select t.id, tt ",
        "from \"table\" t ",
        "left populate join (toTable(json_value(t.\"table\"))) tt ",
        "  on tt.key = 1230 "
      ],
      "expectedResultSets": [
        [
          [{"key":"id","value": 1}, { "key": "tt", "value": null}],
          [{"key":"id","value": 2}, {"key": "tt", "value": null}]
        ]
      ]
    },
    {
      "name": "Table values ctor",
      "query": [
        "select * ",
        "from ( ",
        "  VALUES (1, 'hello'), (2, 'WORLD') ",
        " ) x (col1, col2) "
      ],
      "expectedResultSets": [
        [
          [{"key":"col1","value": 1}, { "key": "col2", "value": "hello"}],
          [{"key":"col1","value": 2}, { "key": "col2", "value": "WORLD"}]
        ]
      ]
    },
    {
      "name": "Table values ctor with sub query expressions",
      "query": [
        "--set @@debugplan = true ",
        "select * ",
        "from ( ",
        "  VALUES (1, (select 'world' col1, 'hello' col2 for object_array)), (2, (select 'hello' col1, 'world' col2 for object_array)) ",
        " ) x (col1, col2) "
      ],
      "expectedResultSets": [
        [
          [{"key":"col1","value": 1}, { "key": "col2", "value": [{"col1":"world","col2":"hello"}]}],
          [{"key":"col1","value": 2}, { "key": "col2", "value": [{"col1":"hello","col2":"world"}]}]
        ]
      ]
    },
    {
      "name": "Table values ctor with outer references",
      "query": [
        "--set @@debugplan = true ",
        "select * ",
        "from source s ",
        "outer apply ( ",
        "  values (s.col1 + s.col2, s.col1 * s.col2) ",
        ") y (col3, col4) "
      ],
      "expectedResultSets": [
        [
          [{"key":"col1","value": 1}, { "key": "col2", "value": 2}, { "key": "col3", "value": 3},  { "key": "col4", "value": 2}],
          [{"key":"col1","value": 3}, { "key": "col2", "value": 4}, { "key": "col3", "value": 7},  { "key": "col4", "value": 12}],
          [{"key":"col1","value": 5}, { "key": "col2", "value": 6}, { "key": "col3", "value": 11}, { "key": "col4", "value": 30}]
        ]
      ]
    },
    {
      "name": "Table values ctor with outer references 2",
      "query": [
        "--set @@debugplan = true ",
        "select y.* ",
        "from source s ",
        "outer apply ( ",
        "  values (s.col1, s.col2) ",
        ") y (col3, col4) "
      ],
      "expectedResultSets": [
        [
          [ { "key": "col3", "value": 1}, { "key": "col4", "value": 2}],
          [ { "key": "col3", "value": 3}, { "key": "col4", "value": 4}],
          [ { "key": "col3", "value": 5}, { "key": "col4", "value": 6}]
        ]
      ]
    },
    {
      "name": "Table values ctor with outer references 3",
      "typedVectors": false,
      "query": [
        "--set @@debugplan = true ",
        "select y.* ",
        "from source s ",
        "inner join data d ",
        "  on d.id = s.col1 ",
        "outer apply ( ",
        "  values (s.col1, s.col2) ",
        "  ,      (d.id,   d.data) ", 
        ") y (col3, col4) "
      ],
      "expectedResultSets": [
        [
          [ { "key": "col3", "value": 1}, { "key": "col4", "value": 2}],
          [ { "key": "col3", "value": 1}, { "key": "col4", "value": "1_1"}],
          [ { "key": "col3", "value": 1}, { "key": "col4", "value": 2}],
          [ { "key": "col3", "value": 1}, { "key": "col4", "value": "1_2"}],
          [ { "key": "col3", "value": 3}, { "key": "col4", "value": 4}],
          [ { "key": "col3", "value": 3}, { "key": "col4", "value": "3_1"}],
          [ { "key": "col3", "value": 3}, { "key": "col4", "value": 4}],
          [ { "key": "col3", "value": 3}, { "key": "col4", "value": "3_2"}],
          [ { "key": "col3", "value": 3}, { "key": "col4", "value": 4}],
          [ { "key": "col3", "value": 3}, { "key": "col4", "value": "3_3"}]
        ]
      ]
    },
    {
      "name": "Table values ctor multiple",
      "query": [
        "--set @@debugplan = true ",
        "select * ",
        "from ( ",
        "  values (1, 2) ",
        ") y (col3, col4) ",
        "outer apply ( ",
        "  values (y.col3 * 2, y.col4 * 4) ",
        ") z (col1, col2) "
      ],
      "expectedResultSets": [
        [
          [{ "key": "col3", "value": 1},  { "key": "col4", "value": 2}, {"key":"col1","value": 2}, { "key": "col2", "value": 8}]
        ]
      ]
    },
    {
      "name": "Operator function from table values ctor",
      "query": [
        "--set @@debugplan = true ",
        "select (select * from (values (1,2), (3,4)) x(col1, col2) for object_array) \"values\""
      ],
      "expectedResultSets": [
        [
          [{ "key": "values", "value": [{"col1": 1, "col2": 2}, {"col1": 3, "col2": 4}]}]
        ]
      ]
    },
    {
      "name": "Multiple Operator function from table values ctor",
      "query": [
        "--set @@debugplan = true ",
        "select * ",
        "from ( ",
        "  values (1,2,(select 1 col for object)), (10,20,(select 30 col for object)) ",
        " )x (a,b,c)"
      ],
      "expectedResultSets": [
        [
          [{ "key": "a", "value": 1  }, { "key": "b", "value": 2  }, {"key": "c", "value": {"col": 1}}],
          [{ "key": "a", "value": 10 }, { "key": "b", "value": 20 }, {"key": "c", "value": {"col": 30}}]
        ]
      ]
    },
    {
      "name": "Sub queries with table values ctor with different alias but same columns",
      "query": [
        "--set @@debugplan = true ",
        "select top 1 y.col1, z.col1, y.col2, z.col2 ",
        "from source s ",
        "outer apply ( ",
        "  values (1, 2) ",
        ") y (col1, col2) ",
        "outer apply ( ",
        "  values (3, 4) ",
        ") z (col1, col2) "
      ],
      "expectedResultSets": [
        [
          [{ "key": "col1", "value": 1},  { "key": "col1", "value": 3}, {"key":"col2","value": 2}, { "key": "col2", "value": 4}]
        ]
      ]
    },
    {
      "name": "Sub queries with selects with different alias but same columns",
      "query": [
        "--set @@debugplan = true ",
        "select top 1 y.col1, z.col1, y.col2, z.col2 ",
        "from source s ",
        "outer apply ( ",
        "  select 1 col1, 2 col2 ",
        ") y ",
        "outer apply ( ",
        "  select 3 col1, 4 col2 ",
        ") z "
      ],
      "expectedResultSets": [
        [
          [{ "key": "col1", "value": 1},  { "key": "col1", "value": 3}, {"key":"col2","value": 2}, { "key": "col2", "value": 4}]
        ]
      ]
    },
    {
      "name": "Mismatching alias => bind to single schema",
      "description": "Table source alias 'tbl' don't match 'object' but this query should still work if we treat 'object' as a column",
      "query": [
        "use complexColumns ",
        "select object.key ",
        "from \"table\" tbl "
      ],
      "expectedResultSets": [
        [
          [{ "key": "key", "value": 666}],
          [{ "key": "key", "value": null}]
        ]
      ]
    },
    {
      "name": "Select Into",
      "query": [
        "select * into new_source from source ",
        "select * from new_source ",
        "insert into new_source (col1, col2) ",
        "values (1337, 666), ",
        "       (100, 200)  ",
        "",
        "select * from new_source ",
        "select name from sys#c.tables order by name ",
        "drop table new_source ",
        "select name from sys#c.tables order by name "
      ],
      "expectedResultSets": [
        [
          [{ "key": "col1", "value": 1}, { "key": "col2", "value": 2}],
          [{ "key": "col1", "value": 3}, { "key": "col2", "value": 4}],
          [{ "key": "col1", "value": 5}, { "key": "col2", "value": 6}]
        ],
        [
          [{ "key": "col1", "value": 1},    { "key": "col2", "value": 2}],
          [{ "key": "col1", "value": 3},    { "key": "col2", "value": 4}],
          [{ "key": "col1", "value": 5},    { "key": "col2", "value": 6}],
          [{ "key": "col1", "value": 1337}, { "key": "col2", "value": 666}],
          [{ "key": "col1", "value": 100},  { "key": "col2", "value": 200}]
        ],
        [
          [{ "key": "name", "value": "agg_data"   }],
          [{ "key": "name", "value": "data"       }],
          [{ "key": "name", "value": "data2"      }],
          [{ "key": "name", "value": "map_values" }],
          [{ "key": "name", "value": "new_source" }],
          [{ "key": "name", "value": "source"     }],
          [{ "key": "name", "value": "source2"    }],
          [{ "key": "name", "value": "strings"    }]
        ],
        [
          [{ "key": "name", "value": "agg_data"   }],
          [{ "key": "name", "value": "data"       }],
          [{ "key": "name", "value": "data2"      }],
          [{ "key": "name", "value": "map_values" }],
          [{ "key": "name", "value": "source"     }],
          [{ "key": "name", "value": "source2"    }],
          [{ "key": "name", "value": "strings"    }]
        ]
      ]
    },
    {
      "name": "Select Into, mismatch insert column and input columns (runtime)",
      "schemaLess": true,
      "query": [
        "select * into new_source from source ",
        "select * from new_source ",
        "insert into new_source (col1) ",
        "select * from new_source "
      ],
      "expectedException": "se.kuseman.payloadbuilder.core.QueryException",
      "expectedMessageContains": "Insert column count doesn't match input column count"
    },
    {
      "name": "Select Into, mismatch insert column and input columns",
      "schemaLess": false,
      "query": [
        "select * into new_source from source ",
        "select * from new_source ",
        "insert into new_source (col1) ",
        "select * from new_source "
      ],
      "expectedException": "se.kuseman.payloadbuilder.core.parser.ParseException",
      "expectedMessageContains": "Insert column count doesn't match input column count"
    }
  ]
}
