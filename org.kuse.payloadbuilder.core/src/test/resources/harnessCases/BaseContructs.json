{
  "name": "BaseContructs",
  "catalogs": [
    {
      "alias": "c",
      "tables": [
        {
          "name": "source",
          "columns": [ "col1", "col2" ],
          "rows": [
            [1, 2],
            [3, 4],
            [5, 6]
          ]
        },
        {
          "name": "data",
          "columns": [ "id", "row_id", "data" ],
          "rows": [
            [1, 1, "1_1"],
            [1, 2, "1_2"],
            [2, 1, "2_1"],
            [3, 1, "3_1"],
            [3, 2, "3_2"],
            [3, 3, "3_3"]
          ]
        },
        {
          "name": "strings",
          "columns": [ "id", "string1", "string2" ],
          "rows": [
            [1, "some string 1", "123abc"],
            [2,  "hello world", "asd"],
            [3, "string 3", "2_1"],
            [4, "same little text", "$56"]
          ]
        }
      ]
    }
  ],
  "cases": [
    {
      "name": "Asterisk select",
      "query": [
        "select * from source"
      ],
      "expectedResultSets": [
        [
          [{ "key": "col1", "value": 1 }, { "key": "col2", "value": 2 }],
          [{ "key": "col1", "value": 3 }, { "key": "col2", "value": 4 }],
          [{ "key": "col1", "value": 5 }, { "key": "col2", "value": 6 }]
        ]
      ]
    },
    {
      "name": "Subquery with a single table source",
      "query": [
        "select x.col1, x.col2 from (select * from source) x"
      ],
      "expectedResultSets": [
        [
          [{ "key": "col1", "value": 1 }, { "key": "col2", "value": 2 }],
          [{ "key": "col1", "value": 3 }, { "key": "col2", "value": 4 }],
          [{ "key": "col1", "value": 5 }, { "key": "col2", "value": 6 }]
        ]
      ]
    },
    {
      "name": "Lambda functions",
      "query": [
        "select r.Value, ",
        " r1.map(x -> r.Value + x.Value) map, ",
        " r1.filter(x -> (r.Value - x.Value) > 0).map(x -> x.Value) filter, ",
        " r1.flatMap(x -> listOf(r.Value, x.Value)) flatMap, ",
        " r1.any(x -> x.Value > 0) any,",
        " r1.all(x -> r.Value - x.Value > 0) all, ",
        " r1.none(x -> r.Value + x.Value > 10) none",
        
        "from range(1, 4) r ",
        "inner join range(1, 11) r1 with (populate=true) ",
        "  on r1.Value % 3 + 1 = r.Value"
      ],
      "expectedResultSets": [
        [
          [{ "key": "Value", "value": 1 },{ "key": "map", "value": [4,7,10] },	{ "key": "filter", "value": [] }, { "key": "flatMap", "value": [1, 3, 1, 6, 1, 9] },	   {"key":"any","value":true},{"key":"all","value":false},{"key":"none","value":true}],
          [{ "key": "Value", "value": 2 },{ "key": "map", "value": [3,6,9,12] },{ "key": "filter", "value": [1] },{ "key": "flatMap", "value": [2, 1, 2, 4, 2, 7, 2, 10] },{"key":"any","value":true},{"key":"all","value":false},{"key":"none","value":false}],
          [{ "key": "Value", "value": 3 },{ "key": "map", "value": [5,8,11] },	{ "key": "filter", "value": [2] },{ "key": "flatMap", "value": [3, 2, 3, 5, 3, 8] },	   {"key":"any","value":true},{"key":"all","value":false},{"key":"none","value":false}]
        ]
      ]
    },
    {
      "name": "Order by",
      "query": [
        "select col1 from source order by col2 desc"
      ],
      "expectedResultSets": [
        [
          [{ "key": "col1", "value": 5 }],
          [{ "key": "col1", "value": 3 }],
          [{ "key": "col1", "value": 1 }]
        ]
      ]
    },
    {
      "name": "Order by expression",
      "query": [
        "select id - row_id newCol from data order by newcol desc"
      ],
      "expectedResultSets": [
        [
          [{ "key": "newCol", "value": 2 }],
          [{ "key": "newCol", "value": 1 }],
          [{ "key": "newCol", "value": 1 }],
          [{ "key": "newCol", "value": 0 }],
          [{ "key": "newCol", "value": 0 }],
          [{ "key": "newCol", "value": -1 }]
        ]
      ]
    },
    {
      "name": "Order by expression function",
      "query": [
        "select hash(id, row_id) newCol from data order by newcol desc"
      ],
      "expectedResultSets": [
        [
          [{ "key": "newCol", "value": 1057 }],
          [{ "key": "newCol", "value": 1056 }],
          [{ "key": "newCol", "value": 1055 }],
          [{ "key": "newCol", "value": 1024 }],
          [{ "key": "newCol", "value": 994 }],
          [{ "key": "newCol", "value": 993 }]
        ]
      ]
    },
    {
      "name": "Order by ordinal",
      "query": [
        "select id - row_id newCol from data order by 1 desc"
      ],
      "expectedResultSets": [
        [
          [{ "key": "newCol", "value": 2 }],
          [{ "key": "newCol", "value": 1 }],
          [{ "key": "newCol", "value": 1 }],
          [{ "key": "newCol", "value": 0 }],
          [{ "key": "newCol", "value": 0 }],
          [{ "key": "newCol", "value": -1 }]
        ]
      ]
    },
    {
      "name": "Order by ordinal non computed",
      "query": [
        "select id newCol from data order by 1 desc"
      ],
      "expectedResultSets": [
        [
          [{ "key": "newCol", "value": 3 }],
          [{ "key": "newCol", "value": 3 }],
          [{ "key": "newCol", "value": 3 }],
          [{ "key": "newCol", "value": 2 }],
          [{ "key": "newCol", "value": 1 }],
          [{ "key": "newCol", "value": 1 }]
        ]
      ]
    },
    {
      "name": "Order by column non computed",
      "query": [
        "select id newCol from data order by newCol desc"
      ],
      "expectedResultSets": [
        [
          [{ "key": "newCol", "value": 3 }],
          [{ "key": "newCol", "value": 3 }],
          [{ "key": "newCol", "value": 3 }],
          [{ "key": "newCol", "value": 2 }],
          [{ "key": "newCol", "value": 1 }],
          [{ "key": "newCol", "value": 1 }]
        ]
      ]
    },
    {
      "name": "Order by ordinal, out of range",
      "query": [
        "select id - row_id newCol from data order by 10 desc"
      ],
      "expectedException": "org.kuse.payloadbuilder.core.parser.ParseException",
      "expectedMessageContains": "ORDER BY position is out of range"
    },
    {
      "name": "Order by ordinal, asterisk",
      "query": [
        "select * from data order by 1 desc"
      ],
      "expectedException": "org.kuse.payloadbuilder.core.parser.ParseException",
      "expectedMessageContains": "ORDER BY position is not supported for non expression select items"
    },
    {
      "name": "Where",
      "query": [
        "select col1 from source where col2 >=4 order by col2 desc"
      ],
      "expectedResultSets": [
        [
          [{ "key": "col1", "value": 5 }],
          [{ "key": "col1", "value": 3 }]
        ]
      ]
    },
    {
      "name": "Top",
      "query": [
        "select top 1 * from source "
      ],
      "expectedResultSets": [
        [
          [{ "key": "col1", "value": 1 }, { "key": "col2", "value": 2 }]
        ]
      ]
    },
    {
      "name": "Top with order by",
      "query": [
        "select top 1 * from source order by col2 desc"
      ],
      "expectedResultSets": [
        [
          [{ "key": "col1", "value": 5 }, { "key": "col2", "value": 6 }]
        ]
      ]
    },
    {
      "name": "Group by",
      "query": [
        "select * from source group by col1"
      ],
      "expectedResultSets": [
        [
          [{ "key": "col1", "value": 1 }, { "key": "col2", "value": [2] }],
          [{ "key": "col1", "value": 3 }, { "key": "col2", "value": [4] }],
          [{ "key": "col1", "value": 5 }, { "key": "col2", "value": [6] }]
        ]
      ]
    },
    {
      "name": "Group by with aggs",
      "query": [
        "select id, count(row_id) count, sum(row_id) sum, data from data group by id"
      ],
      "expectedResultSets": [
        [
          [{ "key": "id", "value": 1 }, { "key": "count", "value": 2 }, { "key": "sum", "value": 3 }, { "key": "data", "value": ["1_1","1_2"] }],
          [{ "key": "id", "value": 2 }, { "key": "count", "value": 1 }, { "key": "sum", "value": 1 }, { "key": "data", "value": ["2_1"] }],
          [{ "key": "id", "value": 3 }, { "key": "count", "value": 3 }, { "key": "sum", "value": 6 }, { "key": "data", "value": ["3_1","3_2","3_3"] }]
        ]
      ]
    },
    {
      "name": "Double result sets",
      "query": [
        "select * from source ",
        "select * from source where col2 = 2"
      ],
      "expectedResultSets": [
        [
          [{ "key": "col1", "value": 1 }, { "key": "col2", "value": 2 }],
          [{ "key": "col1", "value": 3 }, { "key": "col2", "value": 4 }],
          [{ "key": "col1", "value": 5 }, { "key": "col2", "value": 6 }]
        ],
        [
          [{ "key": "col1", "value": 1 }, { "key": "col2", "value": 2 }]
        ]
      ]
    },
    {
      "name": "Assignment select",
      "query": [
        "set @var3 = 0 ",
        "select @var1 = 10 + 20 ",
        "select @var2 = col1 + col2, @var3 = @var3 + 1 from source ",
        "select @var1 Var1, @var2 Var2, @var3 Var3"
      ],
      "expectedResultSets": [
        [
          [{ "key": "Var1", "value": 30 }, { "key": "Var2", "value": 11 }, { "key": "Var3", "value": 3 }]
        ]
      ]
    },
    {
      "name": "LIKE",
      "query": [
        "select * from strings where string1 like '%ll%'",
        "select id from strings where string1 like 's_me%'"
      ],
      "expectedResultSets": [
        [
          [{ "key": "id", "value": 2 }, { "key": "string1", "value": "hello world" }, { "key": "string2", "value": "asd" }]
        ],
        [
          [{ "key": "id", "value": 1 }],
          [{ "key": "id", "value": 4 }]
        ]
        
      ]
    },
    {
      "name": "Assignment select",
      "query": [
        "set @var3 = 0 ",
        "select @var1 = 10 + 20 ",
        "select @var2 = col1 + col2, @var3 = @var3 + 1 from source ",
        "select @var1 Var1, @var2 Var2, @var3 Var3"
      ],
      "expectedResultSets": [
        [
          [{ "key": "Var1", "value": 30 }, { "key": "Var2", "value": 11 }, { "key": "Var3", "value": 3 }]
        ]
      ]
    },
    {
      "name": "Calculated value",
      "query": [
        "select id + row_id calc ",
        "from data "
      ],
      "expectedResultSets": [
        [
          [{ "key": "calc", "value": 2 }],
          [{ "key": "calc", "value": 3 }],
          [{ "key": "calc", "value": 3 }],
          [{ "key": "calc", "value": 4 }],
          [{ "key": "calc", "value": 5 }],
          [{ "key": "calc", "value": 6 }]          
        ]
      ]
    },
    {
      "name": "Calculated value in sub query",
      "query": [
        "select calc ",
        "from ",
        "( ",
        "  select id + row_id calc ",
        "  from data ",
        ") x"
      ],
      "expectedResultSets": [
        [
          [{ "key": "calc", "value": 2 }],
          [{ "key": "calc", "value": 3 }],
          [{ "key": "calc", "value": 3 }],
          [{ "key": "calc", "value": 4 }],
          [{ "key": "calc", "value": 5 }],
          [{ "key": "calc", "value": 6 }]          
        ]
      ]
    },
    {
      "name": "Calculated value in sub query with join",
      "description": [
        "Here we select columns from the sub query table source and hence, ",
        "we should not get values from 'data' here for the single part columns.",
        "However for the multipart items we should still dig down to the correct sub alias"
      ],
      "query": [
        "select id, col2, calc, x.d.data ",
        "from ",
        "( ",
        "  select d.id, s.col2, d.id + s.col2 calc ",
        "  from data d ",
        "  inner join source s ",
        "    on s.col1 = d.row_id ",
        ") x"
      ],
      "expectedResultSets": [
        [
          [{ "key": "id", "value": 1 },{ "key": "col2", "value": 2 },{ "key": "calc", "value": 3 },{ "key": "data", "value": "1_1" }],
          [{ "key": "id", "value": 2 },{ "key": "col2", "value": 2 },{ "key": "calc", "value": 4 },{ "key": "data", "value": "2_1" }],
          [{ "key": "id", "value": 3 },{ "key": "col2", "value": 2 },{ "key": "calc", "value": 5 },{ "key": "data", "value": "3_1" }],
          [{ "key": "id", "value": 3 },{ "key": "col2", "value": 4 },{ "key": "calc", "value": 7 },{ "key": "data", "value": "3_3" }]          
        ]
      ]
    },
    {
      "name": "Join on a calculated column",
      "description": [
        "Make sure that the calculated column inside subquery in used in the join predicate"
      ],
      "query": [
        "select *",
        "from source s",
        "inner join ",
        "( ",
        "  select id + row_id id, d.data",
        "  from data d ",
        ") x ",
        "  on x.id = s.col1 "
      ],
      "expectedResultSets": [
        [
          [{ "key": "col1", "value": 3 },{ "key": "col2", "value": 4 },{ "key": "id", "value": 3 },{ "key": "data", "value": "1_2" }],
          [{ "key": "col1", "value": 3 },{ "key": "col2", "value": 4 },{ "key": "id", "value": 3 },{ "key": "data", "value": "2_1" }],
          [{ "key": "col1", "value": 5 },{ "key": "col2", "value": 6 },{ "key": "id", "value": 5 },{ "key": "data", "value": "3_2" }]
        ]
      ]
    },
    {
      "name": "Reference to non-existing fields in subquery",
      "query": [
        "select col ",
        "from ",
        "( ",
        "  select id ",
        "  from data d ",
        ") x"
      ],
      "expectedException": "org.kuse.payloadbuilder.core.parser.ParseException",
      "expectedMessageContains": "No column defined with name col for alias x"
    }
  ]
}