package com.viskan.payloadbuilder.provider.elastic;

import com.viskan.payloadbuilder.QuerySession;
import com.viskan.payloadbuilder.catalog.CatalogRegistry;
import com.viskan.payloadbuilder.catalog.Index;
import com.viskan.payloadbuilder.catalog.TableAlias;
import com.viskan.payloadbuilder.operator.JsonStringWriter;
import com.viskan.payloadbuilder.operator.Operator;
import com.viskan.payloadbuilder.operator.OperatorBuilder;
import com.viskan.payloadbuilder.operator.Projection;
import com.viskan.payloadbuilder.operator.Row;
import com.viskan.payloadbuilder.parser.ExecutionContext;
import com.viskan.payloadbuilder.parser.QualifiedName;
import com.viskan.payloadbuilder.parser.QueryParser;
import com.viskan.payloadbuilder.parser.QueryStatement;
import com.viskan.payloadbuilder.utils.MapUtils;

import static java.util.Arrays.asList;
import static java.util.stream.Collectors.toList;

import java.io.IOException;
import java.util.Iterator;
import java.util.List;

import org.apache.commons.io.FileUtils;
import org.apache.commons.lang3.time.StopWatch;
import org.apache.commons.lang3.tuple.Pair;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.conn.ssl.NoopHostnameVerifier;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;
import org.junit.Assert;
import org.junit.Test;

import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;

//@Ignore
public class EsTest extends Assert
{
    @Test
    public void test_op() throws JsonParseException, JsonMappingException, IOException
    {
        Index index = new Index(QualifiedName.of("article"), asList("art_id"), 100);
        EtmArticleCategoryESOperator op = new EtmArticleCategoryESOperator("es", new TableAlias(null, QualifiedName.of("article"), "a", new String[] {"art_id", "pluno", "ean13" }), index);

        //String json = "[0,1001,1002,1003,1004,1005,1006,1007,1008,2001,2002,4010,4020,4030,4040,9000,9001,9002,9003,9004,9005,9006,9007,9008,9009,9010,9011,9012,9013,9014,9015,9016,9017,9018,9019,9020,9021,9022,9023,9024,9025,9026,9027,9028,9029,9030,9031,9032,9033,9034,9035,9036,9037,9038,9039,9040,9042,9043,9044,9045,9046,9047,9049,9051,9053,9055,9057,9058,9063,9066,9069,9070,9071,9072,9073,9074,9075,9076,9077,9078,9079,9080,9081,9082,9083,9084,9086,9087,9088,9089,9090,9091,9092,9093,9094,9096,9098,9100,9101,9102,9103,9104,9106,9107,9108,9109,9110,9111,10014,10038,10133,10184,10250,10273,10274,10276,10277,10278,10279,10280,10281,10283,10284,10311,10313,10314,10315,10357,10358,10359,10360,10361,10362,10369,10370,10372,10373,10374,10376,10378,10379,10446,10481,10484,10485,10486,10487,10488,10489,10490,10491,10492,10493,12019,12021,12022,12023,12024,12025,12027,12028,12030,12031,12033,12034,12039,12040,12041,12042,12043,12044,12045,12046,12047,12048,12049,12050,12051,12052,12053,12054,12055,12056,12057,12058,12059,12060,12061,12070,12071,12072,12077,12078,12079,12080,12081,12082,12083,12084,12085,12086,12087,12088,12089,12090,12091,12092,12093,12094,12095,12096,12097,12098,12099,12100,12101,12102,12103,12104,12105,12106,12107,12108,12109,12110,12111,12112,12113,12114,12115,12116,12117,12118,12119,12120,12121,12122,12123,12124,12125,12126,12127,12128,12129,12130,12131,12132,12133,12134,12135,12136,12137,12138,12139,12140,12141,12142,12143,12144,12145,12146,12147,12148,12149,12150,12151,12152,12153,12154,12155,12156,12157,12158,12159,12160,12161,12162,12163,12164,12165,12166,12167,12168,12169,12170,12171,12172,12173,12174,12175,12176,12177,12178,12179,12180,12181,12182,12183,12184,12185,12186,12187,12188,12189,12190,12191,12192,12193,12194,12195,12196,12197,12198,12199,12200,12201,12202,12203,12204,12205,12206,12207,12208,12209,12210,12211,12212,12213,12214,12215,12216,12217,12218,12219,12220,12221,12222,12223,12224,12225,12226,12227,12228,12229,12230,12231,12232,12233,12234,12235,12236,12237,12238,12239,12240,12241,12242,12243,12244,12245,12246,12247,12248,12249,12250,12251,12252,12253,12254,12255,12256,12257,12258,12259,12260,12261,12262,12263,12264,12265,12266,12267,12268,12269,12270,12271,12272,12273,12274,12275,12276,12277,12278,12279,12280,12281,12282,12283,12284,12285,12286,12287,12288,12289,12290,12291,12292,12293,12294,12295,12296,12297,12298,12299,12300,12301,12302,12303,12304,12305,12306,12307,12308,12309,12310,12311,12312,12313,12314,12315,12316,12317,12318,12319,12320,12321,12322,12323,12324,12325,12326,12327,12328,12329,12330,12331,12332,12333,12334,12335,12336,12337,12338,12339,12340,12341,12342,12343,12344,12345,12346,12347,12348,12349,12350,12351,12352,12353,12354,12355,12356,12357,12358,12359,12360,12361,12362,12363,12364,12365,12366,12368,12369,12370,12371,12372,12373,12374,12375,12376,12377,12378,12379,12380,12381,12382,12383,12384,12385,12386,12387,12388,12389,12390,12391,12392,12393,12394,12395,12396,12397,12398,12399,12400,12401,12402,12403,12404,12405,12406,12407,12408,12409,12410,12411,12412,12413,12414,12415,12416,12417,12418,12419,12420,12421,12422,12423,12424,12425,12426,12429,12430,12431,12432,12433,12434,12435,12436,12437,12438,12439,12440,12441,12442,12443,12444,12445,12446,12447,12448,12449,12450,12451,12452,12453,12454,12455,12456,12457,12458,12459,12460,12461,12462,12463,12464,12465,12466,12467,12468,12469,12470,12471,12472,12473,12474,12475,12476,12477,12478,12480,12481,12482,12483,12484,12485,12486,12487,12489,12490,12494,12495,12496,12497,12498,12905,12906,12912,12913,12914,12915,12916,12919,12921,12922,12923,12924,12925,12928,12929,12936,12937,12939,12940,12942,12943,12945,12946,12947,12948,12949,12950,12951,12952,12953,12954,12955,12957,12958,12959,12961,12962,12963,12964,12965,12966,12967,12968,12969,12970,12972,12973,12975,12976,12978,12980,12982,12983,12984,12986,12988,12989,12990,12991,12992,12993,12994,13000,13001,13002,13003,13004,13005,13006,13008,13009,13010,13011,13012,13013,13014,13016,13017,13018,13019,13020,13021,13022,13023,13024,13025,13026,13027,13028,13029,13031,13037,13040,13044,13050,13051,13052,13053,13056,13057,13060,13061,13062,13063,13065,13068,13070,13071,13072,13167,13179,13181,13182,13248,13270,13279,13280,13283,13284,13285,13298,13332,13337,13344,13345,13350,13351,13352,13353,13354,13355,13356,13357,13358,13360,13367,13368,13373,13381,13382,13383,13406,13408,13409,13410,13412,13413,13415,13416,13417,13419,13420,13423,13425,13426,13430,13431,13432,13434,13435,13436,13437,13438,13439,13443,13445,13446,13447,13557,13571,13573,13574,13575,13619,13621,13622,13631,13632,13633,13634,13635,13636,13637,13638,13639,13640,13641,13642,13643,13645,13646,13647,13648,13649,13650,13651,13652,13653,13655,13656,13657,13658,13659,13665,13666,13667,13668,13674,13676,13677,13678,13679,13681,13682,13683,13687,13688,13690,13691,13692,13693,13694,13695,13696,13697,13698,13699,13700,13701,13706,13707,13708,13709,13710,13711,13712,13713,13714,13715,13716,13717,13718,13719,13720,13721,13722,13723,13724,13725,13726,13727,13728,13729,13730,13731,13732,13733,13734,13735,13736,13737,13738,13739,13740,13741,13742,13743,13744,13745,13746,13747,13748,13749,13750,13751,13752,13753,13754,13755,13756,13852,13853,13859,13860,13862,13898,13902,13911,13935,13944,13963,13964,13965,13967,14055,14057,14067,14070,14071,14072,14073,14076,14077,14079,14132,14133,14134,14138,14142,14149,14151,14159,14167,14171,14173,14177,14179,14180,14181,14215,14259,14265,14266,14267,14269,14270,14271,14304,14330,14335,14336,14341,14465,14496,14515,14516,14517,14524,14525,14552,14566,14574,14577,14585,14621,14626,14644,14645,14646,14647,14648,14649,14650,14651,14652,14653,14654,14655,14656,14657,14658,14659,14660,14661,14662,14663,14664,14665,14666,14667,14668,14669,14670,14671,14672,14673,14674,14675,14676,14677,14678,14679,14680,14681,14682,14683,14684,14685,14686,14687,14688,14689,14690,14691,14692,14693,14694,14695,14696,14697,14698,14699,14700,14701,14702,14703,14704,14705,14706,14707,14708,14709,14710,14711,14712,14713,14714,14715,14716,14717,14718,14719,14720,14721,14722,14723,14724,14725,14726,14727,14728,14729,14730,14731,14732,14733,14734,14735,14736,14737,14738,14739,14740,14741,14742,14743,14744,14745,14746,14747,14748,14749,14750,14751,14752,14753,14754,14755,14756,14757,14758,14759,14760,14761,14762,14763,14764,14765,14766,14767,14768,14769,14770,14771,14772,14773,14774,14775,14776,14777,14778,14779,14780,14781,14782,14783,14784,14785,14786,14787,14788,14789,14790,14791,14792,14793,14794,14795,14796,14797,14798,14799,14800,14801,14802,14803,14804,14805,14806,14807,14808,14809,14810,14811,14812,14813,14814,14815,14816,14817,14818,14819,14820,14821,14822,14823,14824,14825,14826,14827,14828,14829,14830,14831,14832,14833,14834,14835,14836,14837,14838,14839,14840,14841,14842,14843,14844,14845,14846,14847,14848,14849,14850,14851,14852,14853,14854,14855,14856,14857,14858,14859,14860,14861,14862,14863,14864,14865,14866,14867,14868,14869,14870,14871,14872,14873,14874,14875,14876,14877,14878,14879,14880,14881,14882,14883,14884,14885,14886,14887,14888,14889,14890,14891,14892,14893,14894,14895,14896,14897,14898,14899,14900,14901,14902,14903,14904,14905,14906,14907,14908,14909,14910,14911,14912,14913,14914,14915,14916,14917,14918,14919,14920,14921,14922,14923,14924,14925,14926,14927,14928,14929,14930,14931,14932,14933,14934,14935,14936,14937,14938,14939,14940,14941,14942,14943,14944,14945,14946,14947,14948,14949,14950,14951,14952,14953,14954,14955,14956,14957,14958,14959,14960,14961,14962,14963,14964,14965,14966,14967,14968,14969,14970,14971,14972,14973,14974,14975,14976,14977,14978,14979,14980,14981,14982,14983,14984,14985,14986,14987,14988,14989,14990,14991,14992,14993,14994,14995,14996,14997,14998,14999,15000,15001,15002,15003,15004,15005,15006,15007,15008,15009,15010,15011,15012,15013,15014,15015,15016,15017,15018,15019,15020,15021,15022,15023,15024,15025,15026,15027,15028,15029,15030,15031,15032,15033,15034,15035,15036,15037,15038,15039,15040,15041,15042,15043,15044,15045,15046,15047,15048,15049,15050,15051,15052,15053,15054,15055,15056,15057,15058,15059,15060,15061,15062,15063,15064,15065,15066,15067,15068,15069,15070,15071,15072,15073,15074,15075,15076,15077,15078,15079,15080,15081,15082,15083,15084,15085,15086,15087,15088,15089,15090,15091,15092,15093,15094,15095,15096,15097,15098,15099,15100,15101,15102,15103,15104,15105,15106,15107,15108,15109,15110,15111,15112,15113,15114,15115,15116,15117,15118,15119,15120,15121,15122,15123,15124,15125,15126,15127,15128,15129,15130,15131,15132,15133,15134,15135,15136,15137,15138,15139,15140,15141,15142,15143,15144,15145,15146,15147,15148,15149,15150,15151,15152,15153,15154,15155,15156,15157,15158,15159,15160,15161,15162,15163,15164,15165,15166,15167,15168,15169,15170,15171,15172,15173,15174,15175,15176,15177,15178,15179,15180,15181,15182,15183,15184,15185,15186,15187,15188,15189,15190,15191,15192,15193,15194,15195,15196,15197,15198,15199,15200,15201,15202,15203,15204,15205,15206,15207,15208,15209,15210,15211,15212,15213,15214,15215,15216,15217,15218,15219,15220,15221,15222,15223,15224,15225,15226,15227,15228,15229,15230,15231,15232,15233,15234,15235,15236,15237,15238,15239,15240,15241,15242,15243,15244,15245,15246,15247,15248,15249,15250,15251,15252,15253,15254,15255,15256,15257,15258,15259,15260,15261,15262,15263,15264,15265,15266,15267,15268,15269,15270,15271,15272,15273,15274,15275,15276,15277,15278,15279,15280,15281,15282,15283,15284,15285,15286,15287,15288,15289,15290,15291,15292,15293,15294,15295,15296,15297,15298,15299,15300,15301,15302,15303,15304,15305,15306,15307,15308,15309,15310,15311,15312,15313,15314,15315,15316,15317,15318,15319,15320,15321,15322,15323,15324,15325,15326,15327,15328,15329,15330,15331,15332,15333,15334,15335,15336,15337,15338,15339,15340,15341,15342,15343,15344,15345,15346,15347,15348,15349,15350,15351,15352,15353,15354,15355,15356,15357,15358,15359,15360,15361,15362,15363,15364,15365,15366,15367,15368,15369,15370,15371,15372,15373,15374,15375,15376,15377,15378,15379,15380,15381,15382,15383,15384,15385,15386,15387,15388,15389,15390,15391,15392,15393,15394,15395,15396,15397,15398,15399,15400,15401,15402,15403,15404,15405,15406,15407,15408,15409,15410,15411,15412,15413,15414,15415,15416,15417,15418,15419,15420,15421,15422,15423,15424,15425,15426,15427,15428,15429,15430,15431,15432,15433,15434,15435,15436,15437,15438,15439,15440,15441,15442,15443,15444,15445,15446,15447,15448,15449,15457,15458,15459,15460,15462,15463,15466,15467,15474,15477,15479,15495,15496,15497,15498,15499,15500,15501,15509,15510,15511,15512,15513,15519,15520,15521,15523,15524,15525,15529,15530,15533,15534,15535,15537,15545,15546]";
        String json = "[1001,1003,1004,1005,1006,1008,2002,4040,9001,9002,9004,9005,9006,9007,9010,9018,9019,9026,9027,9028,9029,9030,9040,9044,9046,9072,9075,9077,9078,9079,9089,9094,9106,10250,10273,10311,10314,10315,10358,10374,10446,10484,10485,10486,10487,10488,10489,10490,10491,10492,10493,12021,12022,12033,12034,12039,12040,12046,12049,12339,12343,12347,12349,12350,12353,12365,12366,12374,12376,12450,12452,12458,12469,13345,13350,13351,13352,13368,13373,13382,13383,13437,13557,13574,13575,13621,13622,13674,13676,13677,13678,13679,13683,13687,13688,13690,13691,13696,13697,13698,13707,13708,13710,13711,13712,13713,13859,13860,13898,13935,13944,13963,13964,13965,14067,14070,14071,14072,14073,14079,14132,14142,14180,14215,14259,14265,14266,14267,14269,14270,14271,14304,14330,14335,14336,14341,14496,14516,14517,14566,14585,14645,14646,15446,15449,15458,15459,15460,15463,15466,15495,15496,15497,15498,15499,15500,15509,15511,15513,15520,15546]";
        List<Integer> art_ids = new ObjectMapper().readValue(json, List.class).subList(0, 100);
        
        int total=art_ids.size();
        int batch=250;
        int loops = (total / batch) +1 ;
        
        QuerySession session = new QuerySession(new CatalogRegistry());
        session.setVariable("es.endpoint", "http://elasticsearch.viskanint.local");
        session.setVariable("es.index", "ramosvnptestmain_c0_v3");
        
        for (int j=0;j<1000000;j++)
        {
        
        StopWatch sw = new StopWatch();
        sw.start();
        int rowCount = 0;
        ExecutionContext ctx = new ExecutionContext(session);
        for(int i=0;i<loops;i++)
        {
            int from = i*batch;
            int to = Math.min(i*batch + batch, total - 1);
            
//            System.out.println(from + " " + to);
//            Iterator<Object[]> iterator = IntStream.range(i*batch, i*batch + batch).mapToObj(v -> new Object[] { v }).iterator();
            
            Iterator<Object[]> iterator = art_ids.subList(from, to).stream().map(v -> new Object[] {v}).iterator(); // IntStream.range(i*batch, i*batch + batch).mapToObj(v -> new Object[] { v }).iterator();
            ctx.getOperatorContext().setOuterIndexValues(iterator);
            Iterator<Row> it = op.open(ctx);

            while (it.hasNext())
            {
                Row row= it.next();
//                System.out.println(row);
                rowCount++;
            }
        }
        sw.stop();
        
        System.out.println(sw.toString() + " " + rowCount);
        }
    }
    
    private static final PoolingHttpClientConnectionManager CONNECTION_MANAGER = new PoolingHttpClientConnectionManager();
    private static final CloseableHttpClient CLIENT = HttpClientBuilder
            .create()
            .setConnectionManager(CONNECTION_MANAGER)
            .disableCookieManagement()
            .setSSLHostnameVerifier(NoopHostnameVerifier.INSTANCE)
            .build();

    
    @Test
    public void test1() throws JsonParseException, JsonMappingException, IOException
    {
        String docType = "EtmArticleV2";
        String esEndpoint = "http://192.168.10.78:9200";
//            String database = "RamosLager157TestDev".toLowerCase();
        String database = "RamosVnpTestMain".toLowerCase();
        int comp_id = 0;
        String index = database + "_c" + comp_id + "_v3";
        String instance = database + (comp_id > 0 ? "_" + comp_id : "");

        
        String json = "[1001,1003,1004,1005,1006,1008,2002,4040,9001,9002,9004,9005,9006,9007,9010,9018,9019,9026,9027,9028,9029,9030,9040,9044,9046,9072,9075,9077,9078,9079,9089,9094,9106,10250,10273,10311,10314,10315,10358,10374,10446,10484,10485,10486,10487,10488,10489,10490,10491,10492,10493,12021,12022,12033,12034,12039,12040,12046,12049,12339,12343,12347,12349,12350,12353,12365,12366,12374,12376,12450,12452,12458,12469,13345,13350,13351,13352,13368,13373,13382,13383,13437,13557,13574,13575,13621,13622,13674,13676,13677,13678,13679,13683,13687,13688,13690,13691,13696,13697,13698,13707,13708,13710,13711,13712,13713,13859,13860,13898,13935,13944,13963,13964,13965,14067,14070,14071,14072,14073,14079,14132,14142,14180,14215,14259,14265,14266,14267,14269,14270,14271,14304,14330,14335,14336,14341,14496,14516,14517,14566,14585,14645,14646,15446,15449,15458,15459,15460,15463,15466,15495,15496,15497,15498,15499,15500,15509,15511,15513,15520,15546]";
        ObjectMapper mapper = new ObjectMapper();
        List<Integer> artIds = mapper.readValue(json, List.class);
        
        List<String> ids = artIds.stream().map(a -> String.format("ramosvnptestmain_EtmArticleV2_%d", a)).collect(toList());
        
        String body = mapper.writeValueAsString(MapUtils.ofEntries(MapUtils.entry("ids", ids)));

        List<String> tables = asList("article","articleAttribute", "articleCategory", "articleProperty");
        
        for (int i=0;i<100;i++)
        {
        StopWatch sw= new StopWatch();
        sw.start();
        for (String table : tables)
        {
        
            String mgetUrl = String.format("%s/%s/data/_mget?filter_path=docs._source&_source_include=payload.%s.columns,payload.%s.rows", esEndpoint, index, table, table);
            HttpPost post = new HttpPost(mgetUrl);
            post.setEntity(new StringEntity(body));
            
            CloseableHttpResponse res = CLIENT.execute(post);
            JsonParser parser = mapper.getFactory().createParser(res.getEntity().getContent());
            while (parser.nextToken() != null)
            {}
        }
        sw.stop();
        System.out.println(sw.toString());
        }
        
    }
    
    
    @Test
    public void test()
    {
        CatalogRegistry reg = new CatalogRegistry();
        EtmArticleCategoryESCatalog c = new EtmArticleCategoryESCatalog();
        reg.registerCatalog("es", c);
        reg.setDefaultCatalog(c);
        
        QueryParser parser = new QueryParser();
//        String queryString = "select a.art_id from article a" ;
//        String queryString = "select a.art_id, ARRAY(sku_id from aa) skus from article a inner join [articleAttribute] aa on aa.art_id = a.art_id AND aa.active_flg AND aa.internet_flg WHERE a.active_flg AND a.internet_flg";
//        String queryString = "select a.art_id, ARRAY(OBJECT(a.sku_id, a.pluno, a.active_flg, a.internet_flg) FROM a) skus from range(15000, 15020) x inner join [articleAttribute] a on a.art_id = x.Value ";

        String queryString = 
            "select a.art_id " +
//            ",  a.internet_flg " +
//            ",  array(sku_id FROM aa) sku_ids " +                    
//            ",  array(object(cat_id, active_flg) FROM ac) cat_ids " +
//            ",  array(row_id FROM aam) row_ids " +
//            ",  array(propertykey_id FROM ap) propertykey_ids " +
//            "from range(0, 16000) x " + 
            "from source x " + 
            "inner join [article] a " + 
            "    on a.art_id = x.Value " + 
            "    and a.active_flg " +
            "    and a.internet_flg " +
//            
            "inner join [articleAttribute] aa " + 
            "    on aa.art_id = x.Value " + 
            "    and aa.active_flg " +
            "    and aa.internet_flg " +
            "inner join [articleCategory] ac " + 
            "    on ac.art_id = x.Value " + 
//            "    and ac.active_flg " +
            "left join [articleAttributeMedia] aam " + 
            "    on aam.art_id = x.Value " +
            "left join [articleProperty] ap " + 
            "    on ap.art_id = x.Value "
            ;

        QueryStatement query = parser.parseQuery(queryString);
        Pair<Operator, Projection> pair = OperatorBuilder.create(reg, query);
        Operator op = pair.getKey();
        Projection pj = pair.getValue();
        
        System.out.println(op.toString(1));
        
        JsonStringWriter jsw = new JsonStringWriter();
        
        for (int i=0;i<100;i++)
        {
        
        StopWatch sw = new StopWatch();
        sw.start();
        ExecutionContext ctx = new ExecutionContext(new QuerySession(reg));
        Iterator<Row> it = op.open(ctx);
        int count = 0;
        while (it.hasNext())
        {
            Row row = it.next();
            pj.writeValue(jsw, ctx, row);
//            System.out.println(
                    jsw.getAndReset();
//                    );
//            
//            System.out.println(row);
            count++;
        }
        
        long memory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        System.out.println("Time: " + sw.toString() + ", mem: " + FileUtils.byteCountToDisplaySize(memory) + ", row count: " + count);
        }
        
    }
}
